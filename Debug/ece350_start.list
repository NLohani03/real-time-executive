
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000390c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b08  08003b08  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b10  08003b10  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000068  08003b80  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00008004  2000053c  08003b80  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009240  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f08  00000000  00000000  0002931b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000631  00000000  00000000  0002ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f6d  00000000  00000000  0002c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4ff  00000000  00000000  00043006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086c27  00000000  00000000  0004e505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026f4  00000000  00000000  000d512c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d7820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a94 	.word	0x08003a94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003a94 	.word	0x08003a94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <osKernelInit>:
uint64_t currentTimeCounter;
TCB nullTask;

int yield_from_tick=0;

void osKernelInit(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    
    SHPR3 |= 0xFFU << 24; //Set the priority of SysTick to be the weakest
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <osKernelInit+0x60>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <osKernelInit+0x60>)
 8000586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800058a:	6013      	str	r3, [r2, #0]
    SHPR3 |= 0xFEU << 16; //shift the constant 0xFE 16 bits to set PendSV priority
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <osKernelInit+0x60>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a12      	ldr	r2, [pc, #72]	; (80005dc <osKernelInit+0x60>)
 8000592:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
 8000596:	6013      	str	r3, [r2, #0]
    SHPR2 |= 0xFDU << 24; //set the priority of SVC higher than PendSV
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <osKernelInit+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <osKernelInit+0x64>)
 800059e:	f043 437d 	orr.w	r3, r3, #4244635648	; 0xfd000000
 80005a2:	6013      	str	r3, [r2, #0]

    queue_init(&tcbs_queue);
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <osKernelInit+0x68>)
 80005a6:	f000 fb5d 	bl	8000c64 <queue_init>

    msp_init_val = *(uint32_t**) 0x0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <osKernelInit+0x6c>)
 80005b0:	6013      	str	r3, [r2, #0]
    psp_init_val = msp_init_val - 0x400; // 0x400 words
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <osKernelInit+0x6c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80005ba:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <osKernelInit+0x70>)
 80005bc:	6013      	str	r3, [r2, #0]

    createQueue(&queue_of_tcbs);
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <osKernelInit+0x74>)
 80005c0:	f000 fb63 	bl	8000c8a <createQueue>
    currentTimeCounter = 1;
 80005c4:	490b      	ldr	r1, [pc, #44]	; (80005f4 <osKernelInit+0x78>)
 80005c6:	f04f 0201 	mov.w	r2, #1
 80005ca:	f04f 0300 	mov.w	r3, #0
 80005ce:	e9c1 2300 	strd	r2, r3, [r1]

    kernel_initialized = true; 
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <osKernelInit+0x7c>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
    return;
 80005d8:	bf00      	nop
}
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	e000ed20 	.word	0xe000ed20
 80005e0:	e000ed1c 	.word	0xe000ed1c
 80005e4:	2000010c 	.word	0x2000010c
 80005e8:	200000b4 	.word	0x200000b4
 80005ec:	200000b8 	.word	0x200000b8
 80005f0:	20000398 	.word	0x20000398
 80005f4:	200000c0 	.word	0x200000c0
 80005f8:	200000bc 	.word	0x200000bc

080005fc <switch_task>:

void switch_task(uint32_t* stack_pointer) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000604:	f3ef 8309 	mrs	r3, PSP
 8000608:	613b      	str	r3, [r7, #16]
  return(result);
 800060a:	693b      	ldr	r3, [r7, #16]

    stack_pointer = __get_PSP(); 
 800060c:	607b      	str	r3, [r7, #4]

    // Save the current stack info in the TCB and Task queue
    if (currently_running_task_edf_queue != NULL) {
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <switch_task+0xb8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d003      	beq.n	800061e <switch_task+0x22>
        currently_running_task_edf_queue->current_stack_addr = stack_pointer;
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <switch_task+0xb8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	611a      	str	r2, [r3, #16]
    }

	currently_running_task_edf_queue = get_non_sleeping_task(&queue_of_tcbs);
 800061e:	4826      	ldr	r0, [pc, #152]	; (80006b8 <switch_task+0xbc>)
 8000620:	f000 fc24 	bl	8000e6c <get_non_sleeping_task>
 8000624:	4603      	mov	r3, r0
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <switch_task+0xb8>)
 8000628:	6013      	str	r3, [r2, #0]

    stack_pointer = currently_running_task_edf_queue->current_stack_addr;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <switch_task+0xb8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	607b      	str	r3, [r7, #4]

    // If this task has not yet been started, set its registers to default values
   if ((!currently_running_task_edf_queue->been_initialized) && currently_running_task_edf_queue->state != RUNNING) {
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <switch_task+0xb8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800063a:	2b00      	cmp	r3, #0
 800063c:	d12b      	bne.n	8000696 <switch_task+0x9a>
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <switch_task+0xb8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	7b1b      	ldrb	r3, [r3, #12]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d026      	beq.n	8000696 <switch_task+0x9a>
        currently_running_task_edf_queue->been_initialized = 1;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <switch_task+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2201      	movs	r2, #1
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        *(--stack_pointer) = 1<<24; //this is xPSR, setting the chip to Thumb mode
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3b04      	subs	r3, #4
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800065e:	601a      	str	r2, [r3, #0]
        *(--stack_pointer) = currently_running_task_edf_queue->ptask; // this is PC
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <switch_task+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3b04      	subs	r3, #4
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 14; ++i) {
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	e008      	b.n	8000688 <switch_task+0x8c>
		    *(--stack_pointer) = 0; // Fill the remaining registers
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3b04      	subs	r3, #4
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 14; ++i) {
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2b0d      	cmp	r3, #13
 800068c:	ddf3      	ble.n	8000676 <switch_task+0x7a>
		}
        currently_running_task_edf_queue->state = RUNNING;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <switch_task+0xb8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2202      	movs	r2, #2
 8000694:	731a      	strb	r2, [r3, #12]
    }
    
   	currently_running_task_edf_queue->state = RUNNING;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <switch_task+0xb8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2202      	movs	r2, #2
 800069c:	731a      	strb	r2, [r3, #12]
    __set_PSP(stack_pointer);  // set the stack pointer to the correct address
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f383 8809 	msr	PSP, r3
}
 80006a8:	bf00      	nop
}
 80006aa:	bf00      	nop
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000b0 	.word	0x200000b0
 80006b8:	20000398 	.word	0x20000398

080006bc <osKernelStart>:

int osKernelStart(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    if (kernel_started || !kernel_initialized) { 
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <osKernelStart+0x50>)
 80006c2:	f993 3000 	ldrsb.w	r3, [r3]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d104      	bne.n	80006d4 <osKernelStart+0x18>
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <osKernelStart+0x54>)
 80006cc:	f993 3000 	ldrsb.w	r3, [r3]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <osKernelStart+0x1e>
        return RTX_ERR;
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d8:	e016      	b.n	8000708 <osKernelStart+0x4c>
    }
    currentTimeCounter = 1;
 80006da:	490e      	ldr	r1, [pc, #56]	; (8000714 <osKernelStart+0x58>)
 80006dc:	f04f 0201 	mov.w	r2, #1
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	e9c1 2300 	strd	r2, r3, [r1]
  __ASM volatile ("cpsie i" : : : "memory");
 80006e8:	b662      	cpsie	i
}
 80006ea:	bf00      	nop
    __enable_irq();
    kernel_started = true;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <osKernelStart+0x50>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
//    if(queue_empty(&queue_of_tcbs)) {
        nullTask.ptask = &null_task;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <osKernelStart+0x5c>)
 80006f4:	4a09      	ldr	r2, [pc, #36]	; (800071c <osKernelStart+0x60>)
 80006f6:	601a      	str	r2, [r3, #0]
        //nullTask.stack_size = 0x400;
        // nullTask.timeslice_initial = 1; 
        // nullTask.timeslice_length = 1; 
        //nullTask.deadline = (uint32_t) - 1;
        osCreateDeadlineTask(2147483647, 0x400, &nullTask);
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <osKernelStart+0x5c>)
 80006fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8000702:	f000 f98d 	bl	8000a20 <osCreateDeadlineTask>
//    }
    SVC(17);
 8000706:	df11      	svc	17
}
 8000708:	4618      	mov	r0, r3
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000084 	.word	0x20000084
 8000710:	200000bc 	.word	0x200000bc
 8000714:	200000c0 	.word	0x200000c0
 8000718:	200000c8 	.word	0x200000c8
 800071c:	08000a15 	.word	0x08000a15

08000720 <k_mem_init>:
struct Metadata* freelist_start;
struct Metadata* freelist_end;
// struct Metadata* alloclist_start;
// struct Metadata* alloclist_end;

int k_mem_init() {
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

	if(!kernel_initialized || k_mem_initialized) {
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <k_mem_init+0x78>)
 8000726:	f993 3000 	ldrsb.w	r3, [r3]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d004      	beq.n	8000738 <k_mem_init+0x18>
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <k_mem_init+0x7c>)
 8000730:	f993 3000 	ldrsb.w	r3, [r3]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <k_mem_init+0x1e>
		return RTX_ERR;
 8000738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073c:	e026      	b.n	800078c <k_mem_init+0x6c>
	}

	heap_end = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073e:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <k_mem_init+0x80>)
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <k_mem_init+0x84>)
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	461a      	mov	r2, r3
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <k_mem_init+0x88>)
 8000748:	601a      	str	r2, [r3, #0]
	heap_start = &_img_end;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <k_mem_init+0x8c>)
 800074c:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <k_mem_init+0x90>)
 800074e:	601a      	str	r2, [r3, #0]
	
	freelist_start = (struct Metadata*)heap_start;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <k_mem_init+0x8c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <k_mem_init+0x94>)
 8000756:	6013      	str	r3, [r2, #0]
	freelist_end = (struct Metadata*)freelist_start;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <k_mem_init+0x94>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <k_mem_init+0x98>)
 800075e:	6013      	str	r3, [r2, #0]

	(*freelist_start).next = NULL;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <k_mem_init+0x94>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
	(*freelist_start).tid = TID_NULL;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <k_mem_init+0x94>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
	(*freelist_start).block_size = ((uint32_t)heap_end - (uint32_t)heap_start);
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <k_mem_init+0x88>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <k_mem_init+0x8c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <k_mem_init+0x94>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	1a8a      	subs	r2, r1, r2
 8000782:	609a      	str	r2, [r3, #8]

	k_mem_initialized = true;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <k_mem_init+0x7c>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]

	return RTX_OK;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200000bc 	.word	0x200000bc
 800079c:	200000f4 	.word	0x200000f4
 80007a0:	20018000 	.word	0x20018000
 80007a4:	00004000 	.word	0x00004000
 80007a8:	200000f8 	.word	0x200000f8
 80007ac:	200000fc 	.word	0x200000fc
 80007b0:	20008540 	.word	0x20008540
 80007b4:	20000100 	.word	0x20000100
 80007b8:	20000104 	.word	0x20000104

080007bc <k_mem_alloc>:


void* k_mem_alloc(size_t size) {
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	// 	printf("k_mem_initialized BOOL: %d\r\n", k_mem_initialized);
    // __enable_irq();
	//look for free space in the empty linked list

	//add node in the deallocated list
	if (!k_mem_initialized) { return (void*)NULL; }
 80007c4:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <k_mem_alloc+0xec>)
 80007c6:	f993 3000 	ldrsb.w	r3, [r3]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <k_mem_alloc+0x16>
 80007ce:	2300      	movs	r3, #0
 80007d0:	e064      	b.n	800089c <k_mem_alloc+0xe0>
	if(size == 0) { return (void*)NULL; }
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <k_mem_alloc+0x20>
 80007d8:	2300      	movs	r3, #0
 80007da:	e05f      	b.n	800089c <k_mem_alloc+0xe0>
    if (size%4) {   // changing size to fill 4 byte chunks (allocations are 4-byte aligned)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f003 0303 	and.w	r3, r3, #3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d004      	beq.n	80007f0 <k_mem_alloc+0x34>
        size = size+4-size%4;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f023 0303 	bic.w	r3, r3, #3
 80007ec:	3304      	adds	r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
    }

	// printf("trying to allocate memory of size %lu after initialization and size is not 0\r\n", size); 

	//block to start traversing from and the prev block t
	struct Metadata* current_block = freelist_start; 
 80007f0:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <k_mem_alloc+0xf0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	61fb      	str	r3, [r7, #28]
	struct Metadata* prev_block = NULL; 
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]

	/**
	 * The next pointer of the current block points to the address of the next block
	 * Subtracting the current block address from the next pointer address will give us the size of the block between the two
	 * */
	while(current_block != NULL) {
 80007fa:	e04b      	b.n	8000894 <k_mem_alloc+0xd8>
		size_t block_size = current_block->block_size; 
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	617b      	str	r3, [r7, #20]
		// __disable_irq();
		// printf("block size, allocation: %d\r\n", block_size);
		// __enable_irq();
		if (block_size >= size) { 
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d33f      	bcc.n	800088a <k_mem_alloc+0xce>
			//block is big enough, allocate the size + size of metadata here 
			struct Metadata* allocated_block = current_block; 
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	613b      	str	r3, [r7, #16]
			allocated_block->block_size = size;
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	609a      	str	r2, [r3, #8]
			// printf("updated allocated_block size to: %d\r\n", allocated_block->block_size);
			long new_block_size = block_size - size - sizeof(struct Metadata);
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	3b10      	subs	r3, #16
 800081c:	60fb      	str	r3, [r7, #12]

			//splitting the block size 
			if (new_block_size > 0) { 
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dd1b      	ble.n	800085c <k_mem_alloc+0xa0>
				//need to cast (char*) apparently to make sure we can add by bytes and not size of Metadata
				if (new_block_size <= sizeof(struct Metadata)){
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b10      	cmp	r3, #16
 8000828:	d806      	bhi.n	8000838 <k_mem_alloc+0x7c>
					allocated_block->block_size = allocated_block->block_size + new_block_size; 
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	441a      	add	r2, r3
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	e011      	b.n	800085c <k_mem_alloc+0xa0>
				} else { 
					struct Metadata* new_free_block = (struct Metadata*)((char*)current_block + size + sizeof(struct Metadata)); 
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3310      	adds	r3, #16
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	4413      	add	r3, r2
 8000840:	60bb      	str	r3, [r7, #8]
					new_free_block->next = current_block->next; 
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	605a      	str	r2, [r3, #4]
					new_free_block->tid = TID_NULL; 
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
					new_free_block->block_size = new_block_size;
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	609a      	str	r2, [r3, #8]
					current_block->next = new_free_block; 
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	605a      	str	r2, [r3, #4]
				}
			}

			//removing from the allocated list 
			if (prev_block != NULL) { //list is not empty
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d004      	beq.n	800086c <k_mem_alloc+0xb0>
				prev_block->next = current_block->next; 
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	685a      	ldr	r2, [r3, #4]
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	e003      	b.n	8000874 <k_mem_alloc+0xb8>
			} else { 
				freelist_start = current_block->next; //list only has one thing in it 
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <k_mem_alloc+0xf0>)
 8000872:	6013      	str	r3, [r2, #0]
			}

			//add allocated block to the allocated list
			allocated_block->tid = currently_running_task_edf_queue->tid; //the task that requested malloc
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <k_mem_alloc+0xf4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	601a      	str	r2, [r3, #0]
			// printf("allocated block tid %u \r\n", allocated_block->tid);
			allocated_block->flag = true;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2201      	movs	r2, #1
 8000882:	731a      	strb	r2, [r3, #12]
			return (void*)((void*)allocated_block + sizeof(struct Metadata));
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	3310      	adds	r3, #16
 8000888:	e008      	b.n	800089c <k_mem_alloc+0xe0>
			//unsure abt the sizeof(Metadata), do we want the pointer to pointer to the metadata part too or just the allocated block?
		}
		prev_block = current_block; 
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	61bb      	str	r3, [r7, #24]
		current_block = current_block->next; 
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	61fb      	str	r3, [r7, #28]
	while(current_block != NULL) {
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1b0      	bne.n	80007fc <k_mem_alloc+0x40>
	} 
	return (void*)NULL;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3724      	adds	r7, #36	; 0x24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	200000f4 	.word	0x200000f4
 80008ac:	20000100 	.word	0x20000100
 80008b0:	200000b0 	.word	0x200000b0

080008b4 <k_mem_dealloc>:

int k_mem_dealloc(void* ptr) {
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    heap_start = &_img_end;
 80008bc:	4b51      	ldr	r3, [pc, #324]	; (8000a04 <k_mem_dealloc+0x150>)
 80008be:	4a52      	ldr	r2, [pc, #328]	; (8000a08 <k_mem_dealloc+0x154>)
 80008c0:	601a      	str	r2, [r3, #0]
	

	// go to ptr
	// go back sizeof(struct Metadata) to get the start of the metadata
    struct Metadata* startOfMetadata = (struct Metadata*) (ptr - sizeof(struct Metadata));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3b10      	subs	r3, #16
 80008c6:	61fb      	str	r3, [r7, #28]
	// use metadata to get size of block
    size_t blockSize = startOfMetadata->block_size;
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	613b      	str	r3, [r7, #16]
    // printf("startOfMetadata: %p\r\n", (void*)startOfMetadata);
	// iterate through freelist (starting at freelist_start) to find this memory location, when the address of current_block->next greater address of ptr
	struct Metadata* after = freelist_start;
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <k_mem_dealloc+0x158>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	61bb      	str	r3, [r7, #24]
	struct Metadata* prev = NULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

    while (after->next != NULL && (void*)(after) <= (void*)startOfMetadata) {
 80008d8:	e004      	b.n	80008e4 <k_mem_dealloc+0x30>
		prev = after;
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	617b      	str	r3, [r7, #20]
        after = after->next;
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	61bb      	str	r3, [r7, #24]
    while (after->next != NULL && (void*)(after) <= (void*)startOfMetadata) {
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d003      	beq.n	80008f4 <k_mem_dealloc+0x40>
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d9f2      	bls.n	80008da <k_mem_dealloc+0x26>
    }

    if ((void*)(after) <= (void*)startOfMetadata) {
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d802      	bhi.n	8000902 <k_mem_dealloc+0x4e>
        // already deallocated block
        return RTX_ERR;
 80008fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000900:	e07a      	b.n	80009f8 <k_mem_dealloc+0x144>
    }

    if (startOfMetadata->flag == true) {
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	7b1b      	ldrb	r3, [r3, #12]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d109      	bne.n	800091e <k_mem_dealloc+0x6a>
        startOfMetadata->flag = false;
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	2200      	movs	r2, #0
 800090e:	731a      	strb	r2, [r3, #12]
    } else {
        return RTX_ERR;
    }

    if (startOfMetadata->tid != currently_running_task.tid && currently_running_task.tid != TID_NULL) {
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <k_mem_dealloc+0x15c>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	429a      	cmp	r2, r3
 800091a:	d00a      	beq.n	8000932 <k_mem_dealloc+0x7e>
 800091c:	e002      	b.n	8000924 <k_mem_dealloc+0x70>
        return RTX_ERR;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000922:	e069      	b.n	80009f8 <k_mem_dealloc+0x144>
    if (startOfMetadata->tid != currently_running_task.tid && currently_running_task.tid != TID_NULL) {
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <k_mem_dealloc+0x15c>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <k_mem_dealloc+0x7e>
        return RTX_ERR;
 800092c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000930:	e062      	b.n	80009f8 <k_mem_dealloc+0x144>
    }
    
    // struct Metadata* current = &next-blockSize-sizeof(struct Metadata);
    // check if current_block+size is ptr (there's no other blocks in between)
	// coalecense if so (change size of current_block->size)
	void* end_address = (void*)startOfMetadata+blockSize+sizeof(struct Metadata);
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3310      	adds	r3, #16
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	4413      	add	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
	void* prev_end_address = (void*)(prev)+prev->block_size+sizeof(struct Metadata);
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	3310      	adds	r3, #16
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	4413      	add	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]

    if (prev_end_address == (void*)startOfMetadata && end_address == (void*)after) {
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	429a      	cmp	r2, r3
 800094e:	d115      	bne.n	800097c <k_mem_dealloc+0xc8>
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	429a      	cmp	r2, r3
 8000956:	d111      	bne.n	800097c <k_mem_dealloc+0xc8>
        prev->block_size=prev->block_size+blockSize+sizeof(struct Metadata) + sizeof(struct Metadata)+after->block_size;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	441a      	add	r2, r3
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4413      	add	r3, r2
 8000966:	f103 0220 	add.w	r2, r3, #32
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	609a      	str	r2, [r3, #8]
        startOfMetadata = prev;
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	61fb      	str	r3, [r7, #28]
        prev->next = after->next;
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	e027      	b.n	80009cc <k_mem_dealloc+0x118>
    } else {
        if (prev_end_address == (void*)startOfMetadata) {
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	429a      	cmp	r2, r3
 8000982:	d109      	bne.n	8000998 <k_mem_dealloc+0xe4>
            // preform coalacence
            prev->block_size=prev->block_size+blockSize+sizeof(struct Metadata);
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4413      	add	r3, r2
 800098c:	f103 0210 	add.w	r2, r3, #16
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	609a      	str	r2, [r3, #8]
            startOfMetadata = prev;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	61fb      	str	r3, [r7, #28]
        }
        if (end_address == (void*)after) {  // coalanence with block after
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	429a      	cmp	r2, r3
 800099e:	d115      	bne.n	80009cc <k_mem_dealloc+0x118>
            // preform coalacence
            startOfMetadata->block_size = blockSize + sizeof(struct Metadata) + (after->block_size);
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	4413      	add	r3, r2
 80009a8:	f103 0210 	add.w	r2, r3, #16
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	609a      	str	r2, [r3, #8]
            if(prev == NULL){
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <k_mem_dealloc+0x10a>
				freelist_start = startOfMetadata;
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <k_mem_dealloc+0x158>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	e002      	b.n	80009c4 <k_mem_dealloc+0x110>
			}
			else{
				prev->next = startOfMetadata;
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	605a      	str	r2, [r3, #4]
			}
			startOfMetadata->next = after->next;
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	605a      	str	r2, [r3, #4]
    }
	// check if ptr+size is current_block->next
    // coalecense (change size of ptr->size, change current_block->next to ptr, change ptr->next to current_block->next->next)
		
	// if no coalecense, change current_block->next to ptr, ptr->next to current_block->next
    if (end_address != (void*)after && prev_end_address != (void*)startOfMetadata) {
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d010      	beq.n	80009f6 <k_mem_dealloc+0x142>
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d00c      	beq.n	80009f6 <k_mem_dealloc+0x142>
		if(prev == NULL){
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <k_mem_dealloc+0x136>
			freelist_start = startOfMetadata;
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <k_mem_dealloc+0x158>)
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e002      	b.n	80009f0 <k_mem_dealloc+0x13c>
		}
		else{
			prev->next = startOfMetadata;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	69fa      	ldr	r2, [r7, #28]
 80009ee:	605a      	str	r2, [r3, #4]
		}
        startOfMetadata->next = after;
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	605a      	str	r2, [r3, #4]
    }
	return RTX_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3724      	adds	r7, #36	; 0x24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200000fc 	.word	0x200000fc
 8000a08:	20008540 	.word	0x20008540
 8000a0c:	20000100 	.word	0x20000100
 8000a10:	20000088 	.word	0x20000088

08000a14 <null_task>:
static uint32_t sp_offset = 0;
int available_stack[MAX_TASKS-1] = {0};
int task_sizes[MAX_TASKS-1] = {0};
struct EDF_Queue queue_of_tcbs;

void null_task(void*args) { 
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    while(1) {
 8000a1c:	e7fe      	b.n	8000a1c <null_task+0x8>
	...

08000a20 <osCreateDeadlineTask>:
        //printf("running the null task\r\n");
    }
}

int osCreateDeadlineTask(int deadline, int s_size, TCB* task) {
 8000a20:	b5b0      	push	{r4, r5, r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]

    if (!kernel_initialized) {
 8000a2c:	4b4f      	ldr	r3, [pc, #316]	; (8000b6c <osCreateDeadlineTask+0x14c>)
 8000a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d102      	bne.n	8000a3c <osCreateDeadlineTask+0x1c>
        return RTX_ERR; //failure kernel is uninitialized
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a3a:	e092      	b.n	8000b62 <osCreateDeadlineTask+0x142>
    }
    if (task == NULL) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <osCreateDeadlineTask+0x28>
        return RTX_ERR;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a46:	e08c      	b.n	8000b62 <osCreateDeadlineTask+0x142>
    }

    if (task->ptask == NULL) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <osCreateDeadlineTask+0x36>
        return RTX_ERR; 
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a54:	e085      	b.n	8000b62 <osCreateDeadlineTask+0x142>
    }
    task->stack_size = s_size;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	81da      	strh	r2, [r3, #14]
    task->deadline = deadline + currentTimeCounter;
 8000a5e:	4b44      	ldr	r3, [pc, #272]	; (8000b70 <osCreateDeadlineTask+0x150>)
 8000a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	441a      	add	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	619a      	str	r2, [r3, #24]

    if (task->stack_size < STACK_SIZE || task->stack_size > 0x4400 ) { //does nothing for bad tasks cause the random value can be in between
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	89db      	ldrh	r3, [r3, #14]
 8000a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a74:	d304      	bcc.n	8000a80 <osCreateDeadlineTask+0x60>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	89db      	ldrh	r3, [r3, #14]
 8000a7a:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8000a7e:	d902      	bls.n	8000a86 <osCreateDeadlineTask+0x66>
        return RTX_ERR;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a84:	e06d      	b.n	8000b62 <osCreateDeadlineTask+0x142>
    }
    if(task->deadline <= 0) { 
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <osCreateDeadlineTask+0x74>
        return RTX_ERR;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a92:	e066      	b.n	8000b62 <osCreateDeadlineTask+0x142>
    }

    task->stack_pointer = (uint32_t*)k_mem_alloc(task->stack_size + sizeof(TCB));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	89db      	ldrh	r3, [r3, #14]
 8000a98:	3328      	adds	r3, #40	; 0x28
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fe8e 	bl	80007bc <k_mem_alloc>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	621a      	str	r2, [r3, #32]

    if (task->stack_pointer == NULL) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <osCreateDeadlineTask+0x94>
        return RTX_ERR; 
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ab2:	e056      	b.n	8000b62 <osCreateDeadlineTask+0x142>
    }
    task->stack_high = (uint32_t)task->stack_pointer + task->stack_size + sizeof(TCB);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	89db      	ldrh	r3, [r3, #14]
 8000abe:	4413      	add	r3, r2
 8000ac0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	605a      	str	r2, [r3, #4]
    task->tid = ++current_task_id;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <osCreateDeadlineTask+0x154>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <osCreateDeadlineTask+0x154>)
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <osCreateDeadlineTask+0x154>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
    if(task->ptask == null_task) { 
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <osCreateDeadlineTask+0x158>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d102      	bne.n	8000aea <osCreateDeadlineTask+0xca>
        task->tid = TID_NULL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
    }
    task->state = READY;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	731a      	strb	r2, [r3, #12]
    task->current_stack_addr = task->stack_high; 
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	611a      	str	r2, [r3, #16]
    task->initialDeadline = deadline;
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
    task->next = NULL;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
    task->been_initialized = 0; 
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    TCB* internal_task = (TCB*)task->stack_pointer;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a1b      	ldr	r3, [r3, #32]
 8000b12:	617b      	str	r3, [r7, #20]
    *internal_task = *task;
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4614      	mov	r4, r2
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b28:	e884 0003 	stmia.w	r4, {r0, r1}
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
    __disable_irq();
    if (!pushToEDFQueue(&queue_of_tcbs, internal_task)) {
 8000b30:	6979      	ldr	r1, [r7, #20]
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <osCreateDeadlineTask+0x15c>)
 8000b34:	f000 f8b9 	bl	8000caa <pushToEDFQueue>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10e      	bne.n	8000b5c <osCreateDeadlineTask+0x13c>
        k_mem_dealloc((void*)task->stack_pointer); 
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff feb6 	bl	80008b4 <k_mem_dealloc>
        current_task_id--; 
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <osCreateDeadlineTask+0x154>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <osCreateDeadlineTask+0x154>)
 8000b50:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b52:	b662      	cpsie	i
}
 8000b54:	bf00      	nop
        __enable_irq();
        return RTX_ERR;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5a:	e002      	b.n	8000b62 <osCreateDeadlineTask+0x142>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b5c:	b662      	cpsie	i
}
 8000b5e:	bf00      	nop
    }
    __enable_irq();
    return RTX_OK;
 8000b60:	2300      	movs	r3, #0

}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000bc 	.word	0x200000bc
 8000b70:	200000c0 	.word	0x200000c0
 8000b74:	20000108 	.word	0x20000108
 8000b78:	08000a15 	.word	0x08000a15
 8000b7c:	20000398 	.word	0x20000398

08000b80 <osTaskExit>:
    }

    return RTX_ERR;
}

int osTaskExit(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
    __disable_irq();
    if(currently_running_task_edf_queue->tid == TID_NULL){
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <osTaskExit+0x48>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d104      	bne.n	8000b9c <osTaskExit+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b92:	b662      	cpsie	i
}
 8000b94:	bf00      	nop
        __enable_irq();
        return RTX_ERR;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9a:	e013      	b.n	8000bc4 <osTaskExit+0x44>
    }
    currently_running_task_edf_queue->state = DORMANT;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <osTaskExit+0x48>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	731a      	strb	r2, [r3, #12]
    removeFromEDFQueue(&queue_of_tcbs, currently_running_task_edf_queue);
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <osTaskExit+0x48>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <osTaskExit+0x4c>)
 8000bac:	f000 f91e 	bl	8000dec <removeFromEDFQueue>
    k_mem_dealloc((void*)currently_running_task_edf_queue->stack_pointer);
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <osTaskExit+0x48>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6a1b      	ldr	r3, [r3, #32]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe7c 	bl	80008b4 <k_mem_dealloc>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bbc:	b662      	cpsie	i
}
 8000bbe:	bf00      	nop
    __enable_irq();
    SVC(17);
 8000bc0:	df11      	svc	17
    return RTX_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000b0 	.word	0x200000b0
 8000bcc:	20000398 	.word	0x20000398

08000bd0 <TaskA>:

int i_test = 0;

int i_test2 = 0;

void TaskA(void *) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    printf("%d\r\n", i_test);
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <TaskA+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <TaskA+0x44>)
 8000be0:	f002 f88a 	bl	8002cf8 <iprintf>
    i_test++;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <TaskA+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <TaskA+0x40>)
 8000bec:	6013      	str	r3, [r2, #0]
    TCB st_mytask;
    st_mytask.ptask = &TaskA;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <TaskA+0x48>)
 8000bf0:	60bb      	str	r3, [r7, #8]
    osCreateDeadlineTask(1000, STACK_SIZE, &st_mytask);
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c00:	f7ff ff0e 	bl	8000a20 <osCreateDeadlineTask>
    osTaskExit();
 8000c04:	f7ff ffbc 	bl	8000b80 <osTaskExit>
}
 8000c08:	bf00      	nop
 8000c0a:	3730      	adds	r7, #48	; 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200003a0 	.word	0x200003a0
 8000c14:	08003aac 	.word	0x08003aac
 8000c18:	08000bd1 	.word	0x08000bd1

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0

  /* MCU Configuration: Don't change this or the whole chip won't work!*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fc57 	bl	80014d4 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 fb07 	bl	8001238 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 fb9b 	bl	8001364 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c2e:	f000 fb6f 	bl	8001310 <MX_USART2_UART_Init>
  /* MCU Configuration is now complete. Start writing your code below this line */

  printf("\r\n\n\n\n\n\n");
 8000c32:	480a      	ldr	r0, [pc, #40]	; (8000c5c <main+0x40>)
 8000c34:	f002 f8c6 	bl	8002dc4 <puts>

//  extern uint32_t _img_end;
//  printf(“End of Image: %x\r\n”,&_img_end);

  osKernelInit();
 8000c38:	f7ff fca0 	bl	800057c <osKernelInit>

  k_mem_init();
 8000c3c:	f7ff fd70 	bl	8000720 <k_mem_init>


  TCB st_mytask;

  st_mytask.ptask = &TaskA;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <main+0x44>)
 8000c42:	603b      	str	r3, [r7, #0]
  osCreateDeadlineTask(1000, STACK_SIZE, &st_mytask);
 8000c44:	463b      	mov	r3, r7
 8000c46:	461a      	mov	r2, r3
 8000c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c50:	f7ff fee6 	bl	8000a20 <osCreateDeadlineTask>
  
  // st_mytask.ptask = &TaskC;
  // osCreateTask(&st_mytask);

//test should print out two different addresses 
  osKernelStart();
 8000c54:	f7ff fd32 	bl	80006bc <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <main+0x3c>
 8000c5a:	bf00      	nop
 8000c5c:	08003ab4 	.word	0x08003ab4
 8000c60:	08000bd1 	.word	0x08000bd1

08000c64 <queue_init>:
    else{
        return false;
    }
}

void queue_init(struct Queue* queue) {
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    queue->first = 0;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
    queue->last = 0;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
    queue->size = 0;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <createQueue>:
}




void createQueue(struct EDF_Queue* queue) {
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
    queue->first = NULL;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
    queue->size = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <pushToEDFQueue>:

int pushToEDFQueue(struct EDF_Queue* queue, TCB *tcb) {
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
    if (queue->size > 16) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	dd01      	ble.n	8000cc0 <pushToEDFQueue+0x16>
        return false;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e049      	b.n	8000d54 <pushToEDFQueue+0xaa>
    }
    TCB* currNode = queue->first;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
    int added = false;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]

    if (currNode == NULL) { //this is the first tcb being added
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d106      	bne.n	8000cde <pushToEDFQueue+0x34>
        tcb->next = NULL;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
        queue->first = tcb;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e034      	b.n	8000d48 <pushToEDFQueue+0x9e>
        //printf("inserted at front of list\r\n", tcb);
    } else if (tcb->deadline < queue->first->deadline) {  // tcb needs to be added to the front because it has the earliest deadline out of all the tcbs
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	699a      	ldr	r2, [r3, #24]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d227      	bcs.n	8000d3c <pushToEDFQueue+0x92>
        tcb->next = queue->first;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	61da      	str	r2, [r3, #28]
        queue->first = tcb;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e025      	b.n	8000d48 <pushToEDFQueue+0x9e>
        //printf("inserted at front of list\r\n", tcb);
    } else {
        while (currNode != NULL && added == false) {  // currNode will only be NULL if we're adding the first Node
        	if (currNode->next == NULL) { // reached the end of the list (add to the end of the list)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d108      	bne.n	8000d16 <pushToEDFQueue+0x6c>
				tcb->next = NULL;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
				currNode->next = tcb;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	61da      	str	r2, [r3, #28]
				added = true;
 8000d10:	2301      	movs	r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	e00f      	b.n	8000d36 <pushToEDFQueue+0x8c>
                //printf("inserted at end of list\r\n", tcb);
			} else if (currNode->next->deadline > tcb->deadline) { // put it somewhere in the middle
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d908      	bls.n	8000d36 <pushToEDFQueue+0x8c>
                tcb->next = currNode->next;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	69da      	ldr	r2, [r3, #28]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	61da      	str	r2, [r3, #28]
                currNode->next = tcb;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	61da      	str	r2, [r3, #28]
                added = true;
 8000d32:	2301      	movs	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
                //printf("inserted in middle of list\r\n");
            }
            currNode = currNode->next;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	60fb      	str	r3, [r7, #12]
        while (currNode != NULL && added == false) {  // currNode will only be NULL if we're adding the first Node
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <pushToEDFQueue+0x9e>
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0d9      	beq.n	8000cfc <pushToEDFQueue+0x52>
        }
    }
    // queue->last = (queue->last + 1) % (MAX_TASKS-1);        // This is 1 on the first item, when it should be 0
    queue->size++;    
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	605a      	str	r2, [r3, #4]
    return true;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <updatePositionInEDFQueue>:


int updatePositionInEDFQueue(struct EDF_Queue* queue, TCB* node) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
    if (queue->size <= 0) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dc01      	bgt.n	8000d76 <updatePositionInEDFQueue+0x16>
        return false;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e036      	b.n	8000de4 <updatePositionInEDFQueue+0x84>
    }
    TCB* current = queue->first;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	60fb      	str	r3, [r7, #12]
    if (current == node) {
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d126      	bne.n	8000dd2 <updatePositionInEDFQueue+0x72>
        queue->first = current->next;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	69da      	ldr	r2, [r3, #28]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	601a      	str	r2, [r3, #0]
        queue->size--;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	605a      	str	r2, [r3, #4]
        pushToEDFQueue(queue, node);
 8000d96:	6839      	ldr	r1, [r7, #0]
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff86 	bl	8000caa <pushToEDFQueue>
 8000d9e:	e01b      	b.n	8000dd8 <updatePositionInEDFQueue+0x78>
    } else {
        while (current != NULL) {
            if (current->next == node) {
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d110      	bne.n	8000dcc <updatePositionInEDFQueue+0x6c>
                current->next = node->next;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	69da      	ldr	r2, [r3, #28]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	61da      	str	r2, [r3, #28]
                node->next = NULL;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
                queue->size--;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	605a      	str	r2, [r3, #4]
                pushToEDFQueue(queue, node);
 8000dc2:	6839      	ldr	r1, [r7, #0]
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff70 	bl	8000caa <pushToEDFQueue>
                break;
 8000dca:	e005      	b.n	8000dd8 <updatePositionInEDFQueue+0x78>
            }
            current = current->next;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	60fb      	str	r3, [r7, #12]
        while (current != NULL) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1e3      	bne.n	8000da0 <updatePositionInEDFQueue+0x40>
        }
    }
    if (current == NULL) { // node wasn't found in the queue
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <updatePositionInEDFQueue+0x82>
        return false;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <updatePositionInEDFQueue+0x84>
    }
    return true;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <removeFromEDFQueue>:

int removeFromEDFQueue(struct EDF_Queue* queue, TCB* node) {
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    if (queue->size <= 0) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dc01      	bgt.n	8000e02 <removeFromEDFQueue+0x16>
        return false;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e02e      	b.n	8000e60 <removeFromEDFQueue+0x74>
    }
    TCB* current = queue->first;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]
    if (current == node) {
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d11e      	bne.n	8000e4e <removeFromEDFQueue+0x62>
        queue->first = current->next;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	601a      	str	r2, [r3, #0]
        queue->size--;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	1e5a      	subs	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	e017      	b.n	8000e54 <removeFromEDFQueue+0x68>
    } else {
        while (current != NULL) {
            if (current->next == node) {
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d10c      	bne.n	8000e48 <removeFromEDFQueue+0x5c>
                current->next = node->next;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	69da      	ldr	r2, [r3, #28]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	61da      	str	r2, [r3, #28]
                node->next = NULL;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
                queue->size--;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
                break;
 8000e46:	e005      	b.n	8000e54 <removeFromEDFQueue+0x68>
            }
            current = current->next;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	60fb      	str	r3, [r7, #12]
        while (current != NULL) {
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1e7      	bne.n	8000e24 <removeFromEDFQueue+0x38>
        }
    }
    if (current == NULL) { // node wasn't found in the queue
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <removeFromEDFQueue+0x72>
        return false;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <removeFromEDFQueue+0x74>
    }
    return true;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <get_non_sleeping_task>:
    queue->size--;
    return true;
}

extern TCB nullTask;
TCB* get_non_sleeping_task(struct EDF_Queue* queue) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    TCB* current = queue->first;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
    while (current != NULL) {
 8000e7a:	e00c      	b.n	8000e96 <get_non_sleeping_task+0x2a>
        if (current->state != SLEEPING && current->tid != TID_NULL) {
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	7b1b      	ldrb	r3, [r3, #12]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d005      	beq.n	8000e90 <get_non_sleeping_task+0x24>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <get_non_sleeping_task+0x24>
            return current;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	e006      	b.n	8000e9e <get_non_sleeping_task+0x32>
        }
        current = current->next;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	60fb      	str	r3, [r7, #12]
    while (current != NULL) {
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1ef      	bne.n	8000e7c <get_non_sleeping_task+0x10>
    }
    return &nullTask; //all tasks are sleeping, return the null task
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <get_non_sleeping_task+0x40>)
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200000c8 	.word	0x200000c8

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_MspInit+0x4c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f000 fc14 	bl	800171c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f76:	f000 fc05 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>
	...

08000fb0 <SVC_Handler_Main>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler_Main(unsigned int* svc_args)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  SCB->ICSR |= 1<<28;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SVC_Handler_Main+0x24>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <SVC_Handler_Main+0x24>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6053      	str	r3, [r2, #4]
  __asm("isb"); //trigger pendsv for context switch
 8000fc4:	f3bf 8f6f 	isb	sy
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8000fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8000ff0:	f000 fac2 	bl	8001578 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */
    if (kernel_started) {
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <SysTick_Handler+0xa8>)
 8000ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d043      	beq.n	8001086 <SysTick_Handler+0x9e>
        currentTimeCounter++;
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <SysTick_Handler+0xac>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f112 0a01 	adds.w	sl, r2, #1
 8001008:	f143 0b00 	adc.w	fp, r3, #0
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <SysTick_Handler+0xac>)
 800100e:	e9c3 ab00 	strd	sl, fp, [r3]
        TCB* tempTCB = queue_of_tcbs.first;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <SysTick_Handler+0xb0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	607b      	str	r3, [r7, #4]
        while (tempTCB->deadline == currentTimeCounter - 1) {
 8001018:	e010      	b.n	800103c <SysTick_Handler+0x54>
            tempTCB->deadline += tempTCB->initialDeadline;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699a      	ldr	r2, [r3, #24]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	441a      	add	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
            tempTCB->state = READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	731a      	strb	r2, [r3, #12]
            //  tempTCB->timeslice_length = tempTCB->timeslice_initial;
            updatePositionInEDFQueue(&queue_of_tcbs, tempTCB);
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4819      	ldr	r0, [pc, #100]	; (8001098 <SysTick_Handler+0xb0>)
 8001032:	f7ff fe95 	bl	8000d60 <updatePositionInEDFQueue>
            //  removeFirstItemFromEDFQueue(&queue_of_tcbs);
            //  pushToEDFQueue(&queue_of_tcbs, tempTCB);
            tempTCB = queue_of_tcbs.first;
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <SysTick_Handler+0xb0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	607b      	str	r3, [r7, #4]
        while (tempTCB->deadline == currentTimeCounter - 1) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2200      	movs	r2, #0
 8001042:	4698      	mov	r8, r3
 8001044:	4691      	mov	r9, r2
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <SysTick_Handler+0xac>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	1e54      	subs	r4, r2, #1
 800104e:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8001052:	45a9      	cmp	r9, r5
 8001054:	bf08      	it	eq
 8001056:	45a0      	cmpeq	r8, r4
 8001058:	d0df      	beq.n	800101a <SysTick_Handler+0x32>
        }
        TCB* new_task_to_run_edf_queue = get_non_sleeping_task(&queue_of_tcbs);
 800105a:	480f      	ldr	r0, [pc, #60]	; (8001098 <SysTick_Handler+0xb0>)
 800105c:	f7ff ff06 	bl	8000e6c <get_non_sleeping_task>
 8001060:	6038      	str	r0, [r7, #0]
        // if (new_task_to_run_edf_queue == NULL) { //no more sleeping tasks to run right now
        //     new_task_to_run_edf_queue = &null_task_tcb;
        // }

        // check if the time is running out for the running task
        if (new_task_to_run_edf_queue->tid == currently_running_task_edf_queue->tid) {
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <SysTick_Handler+0xb4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	429a      	cmp	r2, r3
 800106e:	d00a      	beq.n	8001086 <SysTick_Handler+0x9e>
            // currently_running_task_edf_queue->timeslice_length--;
        } else {
            // currently_running_task_edf_queue->timeslice_length = currently_running_task_edf_queue->timeslice_initial;
            // we need to yield to another task
            yield_from_tick = 1;
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <SysTick_Handler+0xb8>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
            SCB->ICSR |= 1 << 28;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <SysTick_Handler+0xbc>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Handler+0xbc>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6053      	str	r3, [r2, #4]
            __asm("isb");  // trigger pendsv for context switch
 8001082:	f3bf 8f6f 	isb	sy
        }
        /* USER CODE END SysTick_IRQn 1 */
    }
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001090:	20000084 	.word	0x20000084
 8001094:	200000c0 	.word	0x200000c0
 8001098:	20000398 	.word	0x20000398
 800109c:	200000b0 	.word	0x200000b0
 80010a0:	200000f0 	.word	0x200000f0
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <_read>:
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <_read+0x28>
 80010ba:	f3af 8000 	nop.w
 80010be:	4601      	mov	r1, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf0      	blt.n	80010ba <_read+0x12>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_write>:
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e009      	b.n	8001108 <_write+0x26>
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	60ba      	str	r2, [r7, #8]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f889 	bl	8001214 <__io_putchar>
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf1      	blt.n	80010f4 <_write+0x12>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_close>:
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_fstat>:
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	2300      	movs	r3, #0
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_isatty>:
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	2301      	movs	r3, #1
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_lseek>:
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	2300      	movs	r3, #0
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <_sbrk>:
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
 80011b4:	f001 fe16 	bl	8002de4 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20018000 	.word	0x20018000
 80011e4:	00004000 	.word	0x00004000
 80011e8:	200003a4 	.word	0x200003a4
 80011ec:	20000540 	.word	0x20000540

080011f0 <SystemInit>:
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SystemInit+0x20>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <SystemInit+0x20>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__io_putchar>:
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	1d39      	adds	r1, r7, #4
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001222:	2201      	movs	r2, #1
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <__io_putchar+0x20>)
 8001226:	f001 f930 	bl	800248a <HAL_UART_Transmit>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200003a8 	.word	0x200003a8

08001238 <SystemClock_Config>:
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	; 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fdc4 	bl	8002dd4 <memset>
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <SystemClock_Config+0xd0>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a28      	ldr	r2, [pc, #160]	; (8001308 <SystemClock_Config+0xd0>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <SystemClock_Config+0xd0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <SystemClock_Config+0xd4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <SystemClock_Config+0xd4>)
 8001286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <SystemClock_Config+0xd4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
 800129c:	2301      	movs	r3, #1
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a0:	2310      	movs	r3, #16
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
 80012a4:	2302      	movs	r3, #2
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ac:	2310      	movs	r3, #16
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
 80012b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
 80012b6:	2304      	movs	r3, #4
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80012ba:	2307      	movs	r3, #7
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fbfc 	bl	8001ac0 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x9a>
 80012ce:	f000 f8b7 	bl	8001440 <Error_Handler>
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fe5e 	bl	8001fb0 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0xc6>
 80012fa:	f000 f8a1 	bl	8001440 <Error_Handler>
 80012fe:	bf00      	nop
 8001300:	3750      	adds	r7, #80	; 0x50
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <MX_USART2_UART_Init>:
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_USART2_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USART2_UART_Init+0x4c>)
 8001348:	f001 f852 	bl	80023f0 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART2_UART_Init+0x46>
 8001352:	f000 f875 	bl	8001440 <Error_Handler>
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200003a8 	.word	0x200003a8
 8001360:	40004400 	.word	0x40004400

08001364 <MX_GPIO_Init>:
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <MX_GPIO_Init+0xd0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a2c      	ldr	r2, [pc, #176]	; (8001434 <MX_GPIO_Init+0xd0>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <MX_GPIO_Init+0xd0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a25      	ldr	r2, [pc, #148]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a17      	ldr	r2, [pc, #92]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_GPIO_Init+0xd0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	2120      	movs	r1, #32
 80013ee:	4812      	ldr	r0, [pc, #72]	; (8001438 <MX_GPIO_Init+0xd4>)
 80013f0:	f000 fb4c 	bl	8001a8c <HAL_GPIO_WritePin>
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_GPIO_Init+0xd8>)
 800140c:	f000 f9ba 	bl	8001784 <HAL_GPIO_Init>
 8001410:	2320      	movs	r3, #32
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	2301      	movs	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_GPIO_Init+0xd4>)
 8001428:	f000 f9ac 	bl	8001784 <HAL_GPIO_Init>
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020800 	.word	0x40020800

08001440 <Error_Handler>:
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
 8001444:	b672      	cpsid	i
 8001446:	bf00      	nop
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>

0800144a <SVC_Handler>:
 800144a:	f01e 0f04 	tst.w	lr, #4
 800144e:	bf0c      	ite	eq
 8001450:	f3ef 8008 	mrseq	r0, MSP
 8001454:	f3ef 8009 	mrsne	r0, PSP
 8001458:	f7ff bdaa 	b.w	8000fb0 <SVC_Handler_Main>

0800145c <PendSV_Handler>:
 800145c:	f3ef 8009 	mrs	r0, PSP
 8001460:	2800      	cmp	r0, #0
 8001462:	bf18      	it	ne
 8001464:	e920 0ff0 	stmdbne	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001468:	f7ff f8c8 	bl	80005fc <switch_task>
 800146c:	f3ef 8009 	mrs	r0, PSP
 8001470:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001474:	f380 8809 	msr	PSP, r0
 8001478:	f06f 0e02 	mvn.w	lr, #2
 800147c:	4770      	bx	lr
	...

08001480 <Reset_Handler>:
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopFillZerobss+0x12>
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopFillZerobss+0x16>)
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1a>)
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LoopFillZerobss+0x1e>)
 800148a:	2300      	movs	r3, #0
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:
 800148e:	58d4      	ldr	r4, [r2, r3]
 8001490:	50c4      	str	r4, [r0, r3]
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:
 8001494:	18c4      	adds	r4, r0, r3
 8001496:	428c      	cmp	r4, r1
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <LoopFillZerobss+0x22>)
 800149c:	4c0b      	ldr	r4, [pc, #44]	; (80014cc <LoopFillZerobss+0x26>)
 800149e:	2300      	movs	r3, #0
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:
 80014a6:	42a2      	cmp	r2, r4
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>
 80014aa:	f7ff fea1 	bl	80011f0 <SystemInit>
 80014ae:	f001 fc9f 	bl	8002df0 <__libc_init_array>
 80014b2:	f7ff fbb3 	bl	8000c1c <main>
 80014b6:	4770      	bx	lr
 80014b8:	20018000 	.word	0x20018000
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000068 	.word	0x20000068
 80014c4:	08003b18 	.word	0x08003b18
 80014c8:	20000068 	.word	0x20000068
 80014cc:	2000053c 	.word	0x2000053c

080014d0 <ADC_IRQHandler>:
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <HAL_Init>:
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_Init+0x40>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_Init+0x40>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x40>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f90d 	bl	800171c <HAL_NVIC_SetPriorityGrouping>
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>
 8001508:	f7ff fcd2 	bl	8000eb0 <HAL_MspInit>
 800150c:	2300      	movs	r3, #0
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00

08001518 <HAL_InitTick>:
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f917 	bl	800176a <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001554:	f000 f8ed 	bl	8001732 <HAL_NVIC_SetPriority>
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
 8001562:	2301      	movs	r3, #1
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	200003ec 	.word	0x200003ec

080015a0 <HAL_GetTick>:
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200003ec 	.word	0x200003ec

080015b8 <__NVIC_SetPriorityGrouping>:
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_SetPriority>:
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
 80016c8:	4313      	orrs	r3, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	2300      	movs	r3, #0
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff47 	bl	80015b8 <__NVIC_SetPriorityGrouping>
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	f7ff ff5c 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff8e 	bl	8001670 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5d 	bl	800161c <__NVIC_SetPriority>
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffb0 	bl	80016d8 <SysTick_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_Init>:
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e159      	b.n	8001a54 <HAL_GPIO_Init+0x2d0>
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f040 8148 	bne.w	8001a4e <HAL_GPIO_Init+0x2ca>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d005      	beq.n	80017d6 <HAL_GPIO_Init+0x52>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d130      	bne.n	8001838 <HAL_GPIO_Init+0xb4>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 0201 	and.w	r2, r3, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <HAL_GPIO_Init+0xf0>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x144>
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80a2 	beq.w	8001a4e <HAL_GPIO_Init+0x2ca>
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a52      	ldr	r2, [pc, #328]	; (8001a70 <HAL_GPIO_Init+0x2ec>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a49      	ldr	r2, [pc, #292]	; (8001a74 <HAL_GPIO_Init+0x2f0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x202>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2f4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x1fe>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a47      	ldr	r2, [pc, #284]	; (8001a7c <HAL_GPIO_Init+0x2f8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x1fa>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a46      	ldr	r2, [pc, #280]	; (8001a80 <HAL_GPIO_Init+0x2fc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x1f6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a45      	ldr	r2, [pc, #276]	; (8001a84 <HAL_GPIO_Init+0x300>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x1f2>
 8001972:	2304      	movs	r3, #4
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001976:	2307      	movs	r3, #7
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x204>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x204>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x2ec>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x246>
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x270>
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x29a>
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6053      	str	r3, [r2, #4]
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2c4>
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f aea2 	bls.w	80017a0 <HAL_GPIO_Init+0x1c>
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40013c00 	.word	0x40013c00

08001a8c <HAL_GPIO_WritePin>:
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_RCC_OscConfig>:
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e267      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d075      	beq.n	8001bca <HAL_RCC_OscConfig+0x10a>
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d00c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x44>
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d112      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
 8001af6:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b02:	d10b      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
 8001b04:	4b7e      	ldr	r3, [pc, #504]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d05b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d157      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x108>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e242      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x74>
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6c      	ldr	r2, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b58:	4b69      	ldr	r3, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a68      	ldr	r2, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a65      	ldr	r2, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
 8001b78:	f7ff fd12 	bl	80015a0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xd2>
 8001b80:	f7ff fd0e 	bl	80015a0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xd2>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e207      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001b92:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
 8001ba0:	f7ff fcfe 	bl	80015a0 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xfa>
 8001ba8:	f7ff fcfa 	bl	80015a0 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xfa>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1f3      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
 8001bc8:	bf00      	nop
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1de>
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x13a>
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
 8001bee:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1c7      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1b2>
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f7ff fcb3 	bl	80015a0 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x190>
 8001c3e:	f7ff fcaf 	bl	80015a0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x190>
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1a8      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x17e>
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4925      	ldr	r1, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f7ff fc92 	bl	80015a0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
 8001c80:	f7ff fc8e 	bl	80015a0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e187      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1c0>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0x258>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x220>
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f7ff fc72 	bl	80015a0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
 8001cc0:	f7ff fc6e 	bl	80015a0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x212>
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e167      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x200>
 8001cde:	e01b      	b.n	8001d18 <HAL_RCC_OscConfig+0x258>
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f7ff fc5b 	bl	80015a0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]
 8001cec:	e00e      	b.n	8001d0c <HAL_RCC_OscConfig+0x24c>
 8001cee:	f7ff fc57 	bl	80015a0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d907      	bls.n	8001d0c <HAL_RCC_OscConfig+0x24c>
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e150      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
 8001d0c:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ea      	bne.n	8001cee <HAL_RCC_OscConfig+0x22e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8097 	beq.w	8001e54 <HAL_RCC_OscConfig+0x394>
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
 8001d2a:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x296>
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2d4>
 8001d62:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a73      	ldr	r2, [pc, #460]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	f7ff fc17 	bl	80015a0 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
 8001d76:	f7ff fc13 	bl	80015a0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
 8001d84:	2303      	movs	r3, #3
 8001d86:	e10c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2b6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x2ea>
 8001d9c:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a63      	ldr	r2, [pc, #396]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x30c>
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a5e      	ldr	r2, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001dcc:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a54      	ldr	r2, [pc, #336]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_RCC_OscConfig+0x358>
 8001dec:	f7ff fbd8 	bl	80015a0 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x34a>
 8001df4:	f7ff fbd4 	bl	80015a0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x34a>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0cb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x382>
 8001e18:	f7ff fbc2 	bl	80015a0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
 8001e20:	f7ff fbbe 	bl	80015a0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x376>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0b5      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_OscConfig+0x360>
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x394>
 8001e48:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a38      	ldr	r2, [pc, #224]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a1 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x4e0>
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d05c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x464>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d141      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x436>
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f7ff fb92 	bl	80015a0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
 8001e80:	f7ff fb8e 	bl	80015a0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e087      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f7ff fb67 	bl	80015a0 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x428>
 8001ed6:	f7ff fb63 	bl	80015a0 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x428>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e05c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x416>
 8001ef4:	e054      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f7ff fb50 	bl	80015a0 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x456>
 8001f04:	f7ff fb4c 	bl	80015a0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x456>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e045      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x444>
 8001f22:	e03d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x47c>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e038      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42470060 	.word	0x42470060
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d028      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d121      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f72:	0192      	lsls	r2, r2, #6
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	041b      	lsls	r3, r3, #16
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	061b      	lsls	r3, r3, #24
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_RCC_ClockConfig>:
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0cc      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
 8001fc4:	4b68      	ldr	r3, [pc, #416]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d90c      	bls.n	8001fec <HAL_RCC_ClockConfig+0x3c>
 8001fd2:	4b65      	ldr	r3, [pc, #404]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x3c>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x8a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x60>
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800200e:	6093      	str	r3, [r2, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x78>
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002026:	6093      	str	r3, [r2, #8]
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d044      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d119      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_ClockConfig+0xbe>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
 800207a:	2301      	movs	r3, #1
 800207c:	e06f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
 800208a:	2301      	movs	r3, #1
 800208c:	e067      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4934      	ldr	r1, [pc, #208]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
 80020a0:	f7ff fa7e 	bl	80015a0 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
 80020a8:	f7ff fa7a 	bl	80015a0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20c      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x148>
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x148>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x166>
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x186>
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f9de 	bl	8001518 <HAL_InitTick>
 800215c:	2300      	movs	r3, #0
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	08003abc 	.word	0x08003abc
 8002174:	20000000 	.word	0x20000000
 8002178:	20000004 	.word	0x20000004

0800217c <HAL_RCC_GetSysClockFreq>:
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b094      	sub	sp, #80	; 0x50
 8002182:	af00      	add	r7, sp, #0
 8002184:	2300      	movs	r3, #0
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
 8002188:	2300      	movs	r3, #0
 800218a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
 8002190:	2300      	movs	r3, #0
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
 8002194:	4b79      	ldr	r3, [pc, #484]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d00d      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x40>
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	f200 80e1 	bhi.w	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x34>
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ae:	e0db      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021b0:	4b73      	ldr	r3, [pc, #460]	; (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 80021b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021b4:	e0db      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCC_GetSysClockFreq+0x208>)
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021ba:	e0d8      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
 80021bc:	4b6f      	ldr	r3, [pc, #444]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c4:	647b      	str	r3, [r7, #68]	; 0x44
 80021c6:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x11e>
 80021d2:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
 80021dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
 80021e6:	2300      	movs	r3, #0
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002200:	0150      	lsls	r0, r2, #5
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4621      	mov	r1, r4
 8002208:	1a51      	subs	r1, r2, r1
 800220a:	6139      	str	r1, [r7, #16]
 800220c:	4629      	mov	r1, r5
 800220e:	eb63 0301 	sbc.w	r3, r3, r1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002220:	4659      	mov	r1, fp
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	4651      	mov	r1, sl
 8002226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222a:	4651      	mov	r1, sl
 800222c:	018a      	lsls	r2, r1, #6
 800222e:	4651      	mov	r1, sl
 8002230:	ebb2 0801 	subs.w	r8, r2, r1
 8002234:	4659      	mov	r1, fp
 8002236:	eb63 0901 	sbc.w	r9, r3, r1
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800224a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224e:	4690      	mov	r8, r2
 8002250:	4699      	mov	r9, r3
 8002252:	4623      	mov	r3, r4
 8002254:	eb18 0303 	adds.w	r3, r8, r3
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	462b      	mov	r3, r5
 800225c:	eb49 0303 	adc.w	r3, r9, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800226e:	4629      	mov	r1, r5
 8002270:	024b      	lsls	r3, r1, #9
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002278:	4621      	mov	r1, r4
 800227a:	024a      	lsls	r2, r1, #9
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
 8002286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800228c:	f7fd fff8 	bl	8000280 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002298:	e058      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x1d0>
 800229a:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	2200      	movs	r2, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	4611      	mov	r1, r2
 80022a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022aa:	623b      	str	r3, [r7, #32]
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022b4:	4642      	mov	r2, r8
 80022b6:	464b      	mov	r3, r9
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	0159      	lsls	r1, r3, #5
 80022c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c6:	0150      	lsls	r0, r2, #5
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4641      	mov	r1, r8
 80022ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80022d2:	4649      	mov	r1, r9
 80022d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ec:	ebb2 040a 	subs.w	r4, r2, sl
 80022f0:	eb63 050b 	sbc.w	r5, r3, fp
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	00eb      	lsls	r3, r5, #3
 80022fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002302:	00e2      	lsls	r2, r4, #3
 8002304:	4614      	mov	r4, r2
 8002306:	461d      	mov	r5, r3
 8002308:	4643      	mov	r3, r8
 800230a:	18e3      	adds	r3, r4, r3
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	464b      	mov	r3, r9
 8002310:	eb45 0303 	adc.w	r3, r5, r3
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002322:	4629      	mov	r1, r5
 8002324:	028b      	lsls	r3, r1, #10
 8002326:	4621      	mov	r1, r4
 8002328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800232c:	4621      	mov	r1, r4
 800232e:	028a      	lsls	r2, r1, #10
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002336:	2200      	movs	r2, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	61fa      	str	r2, [r7, #28]
 800233c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002340:	f7fd ff9e 	bl	8000280 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	3301      	adds	r3, #1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	643b      	str	r3, [r7, #64]	; 0x40
 800235c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800235e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	64bb      	str	r3, [r7, #72]	; 0x48
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 800236a:	64bb      	str	r3, [r7, #72]	; 0x48
 800236c:	bf00      	nop
 800236e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002370:	4618      	mov	r0, r3
 8002372:	3750      	adds	r7, #80	; 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	00f42400 	.word	0x00f42400
 8002384:	007a1200 	.word	0x007a1200

08002388 <HAL_RCC_GetHCLKFreq>:
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_RCC_GetHCLKFreq+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000

080023a0 <HAL_RCC_GetPCLK1Freq>:
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	f7ff fff0 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0a9b      	lsrs	r3, r3, #10
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	08003acc 	.word	0x08003acc

080023c8 <HAL_RCC_GetPCLK2Freq>:
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	f7ff ffdc 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	0b5b      	lsrs	r3, r3, #13
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	4903      	ldr	r1, [pc, #12]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	08003acc 	.word	0x08003acc

080023f0 <HAL_UART_Init>:
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Init+0x12>
 80023fe:	2301      	movs	r3, #1
 8002400:	e03f      	b.n	8002482 <HAL_UART_Init+0x92>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_UART_Init+0x2c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fd72 	bl	8000f00 <HAL_UART_MspInit>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2224      	movs	r2, #36	; 0x24
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f929 	bl	800268c <UART_SetConfig>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002448:	611a      	str	r2, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002458:	615a      	str	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	2300      	movs	r3, #0
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_UART_Transmit>:
 800248a:	b580      	push	{r7, lr}
 800248c:	b08a      	sub	sp, #40	; 0x28
 800248e:	af02      	add	r7, sp, #8
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d17c      	bne.n	80025a4 <HAL_UART_Transmit+0x11a>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_UART_Transmit+0x2c>
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Transmit+0x30>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e075      	b.n	80025a6 <HAL_UART_Transmit+0x11c>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_UART_Transmit+0x3e>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e06e      	b.n	80025a6 <HAL_UART_Transmit+0x11c>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2221      	movs	r2, #33	; 0x21
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024de:	f7ff f85f 	bl	80015a0 <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	849a      	strh	r2, [r3, #36]	; 0x24
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	84da      	strh	r2, [r3, #38]	; 0x26
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f8:	d108      	bne.n	800250c <HAL_UART_Transmit+0x82>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <HAL_UART_Transmit+0x82>
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	e003      	b.n	8002514 <HAL_UART_Transmit+0x8a>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800251c:	e02a      	b.n	8002574 <HAL_UART_Transmit+0xea>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f840 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_UART_Transmit+0xae>
 8002534:	2303      	movs	r3, #3
 8002536:	e036      	b.n	80025a6 <HAL_UART_Transmit+0x11c>
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <HAL_UART_Transmit+0xcc>
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3302      	adds	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e007      	b.n	8002566 <HAL_UART_Transmit+0xdc>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	84da      	strh	r2, [r3, #38]	; 0x26
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1cf      	bne.n	800251e <HAL_UART_Transmit+0x94>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2200      	movs	r2, #0
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f810 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_UART_Transmit+0x10e>
 8002594:	2303      	movs	r3, #3
 8002596:	e006      	b.n	80025a6 <HAL_UART_Transmit+0x11c>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_UART_Transmit+0x11c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <UART_WaitOnFlagUntilTimeout>:
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b090      	sub	sp, #64	; 0x40
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	e050      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
 80025c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c6:	d04c      	beq.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
 80025c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0x30>
 80025ce:	f7fe ffe7 	bl	80015a0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025da:	429a      	cmp	r2, r3
 80025dc:	d241      	bcs.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	e853 3f00 	ldrex	r3, [r3]
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	330c      	adds	r3, #12
 80025fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fe:	637a      	str	r2, [r7, #52]	; 0x34
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
 8002602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e5      	bne.n	80025de <UART_WaitOnFlagUntilTimeout+0x30>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002632:	623a      	str	r2, [r7, #32]
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	69f9      	ldr	r1, [r7, #28]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e5      	bne.n	8002612 <UART_WaitOnFlagUntilTimeout+0x64>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800265e:	2303      	movs	r3, #3
 8002660:	e00f      	b.n	8002682 <UART_WaitOnFlagUntilTimeout+0xd4>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4013      	ands	r3, r2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	429a      	cmp	r2, r3
 800267e:	d09f      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x12>
 8002680:	2300      	movs	r3, #0
 8002682:	4618      	mov	r0, r3
 8002684:	3740      	adds	r7, #64	; 0x40
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <UART_SetConfig>:
 800268c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002690:	b0c0      	sub	sp, #256	; 0x100
 8002692:	af00      	add	r7, sp, #0
 8002694:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a8:	68d9      	ldr	r1, [r3, #12]
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	ea40 0301 	orr.w	r3, r0, r1
 80026b4:	6113      	str	r3, [r2, #16]
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026e4:	f021 010c 	bic.w	r1, r1, #12
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026f2:	430b      	orrs	r3, r1
 80026f4:	60d3      	str	r3, [r2, #12]
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002706:	6999      	ldr	r1, [r3, #24]
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	ea40 0301 	orr.w	r3, r0, r1
 8002712:	6153      	str	r3, [r2, #20]
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <UART_SetConfig+0x2cc>)
 800271c:	429a      	cmp	r2, r3
 800271e:	d005      	beq.n	800272c <UART_SetConfig+0xa0>
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b8d      	ldr	r3, [pc, #564]	; (800295c <UART_SetConfig+0x2d0>)
 8002728:	429a      	cmp	r2, r3
 800272a:	d104      	bne.n	8002736 <UART_SetConfig+0xaa>
 800272c:	f7ff fe4c 	bl	80023c8 <HAL_RCC_GetPCLK2Freq>
 8002730:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002734:	e003      	b.n	800273e <UART_SetConfig+0xb2>
 8002736:	f7ff fe33 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 800273a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800273e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002748:	f040 810c 	bne.w	8002964 <UART_SetConfig+0x2d8>
 800274c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002750:	2200      	movs	r2, #0
 8002752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002756:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800275a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800275e:	4622      	mov	r2, r4
 8002760:	462b      	mov	r3, r5
 8002762:	1891      	adds	r1, r2, r2
 8002764:	65b9      	str	r1, [r7, #88]	; 0x58
 8002766:	415b      	adcs	r3, r3
 8002768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800276a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800276e:	4621      	mov	r1, r4
 8002770:	eb12 0801 	adds.w	r8, r2, r1
 8002774:	4629      	mov	r1, r5
 8002776:	eb43 0901 	adc.w	r9, r3, r1
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800278a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800278e:	4690      	mov	r8, r2
 8002790:	4699      	mov	r9, r3
 8002792:	4623      	mov	r3, r4
 8002794:	eb18 0303 	adds.w	r3, r8, r3
 8002798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800279c:	462b      	mov	r3, r5
 800279e:	eb49 0303 	adc.w	r3, r9, r3
 80027a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027ba:	460b      	mov	r3, r1
 80027bc:	18db      	adds	r3, r3, r3
 80027be:	653b      	str	r3, [r7, #80]	; 0x50
 80027c0:	4613      	mov	r3, r2
 80027c2:	eb42 0303 	adc.w	r3, r2, r3
 80027c6:	657b      	str	r3, [r7, #84]	; 0x54
 80027c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027d0:	f7fd fd56 	bl	8000280 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4b61      	ldr	r3, [pc, #388]	; (8002960 <UART_SetConfig+0x2d4>)
 80027da:	fba3 2302 	umull	r2, r3, r3, r2
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	011c      	lsls	r4, r3, #4
 80027e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027f4:	4642      	mov	r2, r8
 80027f6:	464b      	mov	r3, r9
 80027f8:	1891      	adds	r1, r2, r2
 80027fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80027fc:	415b      	adcs	r3, r3
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002800:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002804:	4641      	mov	r1, r8
 8002806:	eb12 0a01 	adds.w	sl, r2, r1
 800280a:	4649      	mov	r1, r9
 800280c:	eb43 0b01 	adc.w	fp, r3, r1
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800281c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002824:	4692      	mov	sl, r2
 8002826:	469b      	mov	fp, r3
 8002828:	4643      	mov	r3, r8
 800282a:	eb1a 0303 	adds.w	r3, sl, r3
 800282e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002832:	464b      	mov	r3, r9
 8002834:	eb4b 0303 	adc.w	r3, fp, r3
 8002838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002848:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800284c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002850:	460b      	mov	r3, r1
 8002852:	18db      	adds	r3, r3, r3
 8002854:	643b      	str	r3, [r7, #64]	; 0x40
 8002856:	4613      	mov	r3, r2
 8002858:	eb42 0303 	adc.w	r3, r2, r3
 800285c:	647b      	str	r3, [r7, #68]	; 0x44
 800285e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002862:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002866:	f7fd fd0b 	bl	8000280 <__aeabi_uldivmod>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4611      	mov	r1, r2
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <UART_SetConfig+0x2d4>)
 8002872:	fba3 2301 	umull	r2, r3, r3, r1
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2264      	movs	r2, #100	; 0x64
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	1acb      	subs	r3, r1, r3
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <UART_SetConfig+0x2d4>)
 8002888:	fba3 2302 	umull	r2, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002894:	441c      	add	r4, r3
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80028b0:	415b      	adcs	r3, r3
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028b8:	4641      	mov	r1, r8
 80028ba:	1851      	adds	r1, r2, r1
 80028bc:	6339      	str	r1, [r7, #48]	; 0x30
 80028be:	4649      	mov	r1, r9
 80028c0:	414b      	adcs	r3, r1
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028d0:	4659      	mov	r1, fp
 80028d2:	00cb      	lsls	r3, r1, #3
 80028d4:	4651      	mov	r1, sl
 80028d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028da:	4651      	mov	r1, sl
 80028dc:	00ca      	lsls	r2, r1, #3
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	4642      	mov	r2, r8
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028ec:	464b      	mov	r3, r9
 80028ee:	460a      	mov	r2, r1
 80028f0:	eb42 0303 	adc.w	r3, r2, r3
 80028f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002904:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002908:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800290c:	460b      	mov	r3, r1
 800290e:	18db      	adds	r3, r3, r3
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 8002912:	4613      	mov	r3, r2
 8002914:	eb42 0303 	adc.w	r3, r2, r3
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800291e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002922:	f7fd fcad 	bl	8000280 <__aeabi_uldivmod>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <UART_SetConfig+0x2d4>)
 800292c:	fba3 1302 	umull	r1, r3, r3, r2
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	2164      	movs	r1, #100	; 0x64
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	3332      	adds	r3, #50	; 0x32
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <UART_SetConfig+0x2d4>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	f003 0207 	and.w	r2, r3, #7
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4422      	add	r2, r4
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	e106      	b.n	8002b64 <UART_SetConfig+0x4d8>
 8002956:	bf00      	nop
 8002958:	40011000 	.word	0x40011000
 800295c:	40011400 	.word	0x40011400
 8002960:	51eb851f 	.word	0x51eb851f
 8002964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800296e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002972:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002976:	4642      	mov	r2, r8
 8002978:	464b      	mov	r3, r9
 800297a:	1891      	adds	r1, r2, r2
 800297c:	6239      	str	r1, [r7, #32]
 800297e:	415b      	adcs	r3, r3
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002986:	4641      	mov	r1, r8
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4649      	mov	r1, r9
 800298c:	eb43 0501 	adc.w	r5, r3, r1
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	00eb      	lsls	r3, r5, #3
 800299a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800299e:	00e2      	lsls	r2, r4, #3
 80029a0:	4614      	mov	r4, r2
 80029a2:	461d      	mov	r5, r3
 80029a4:	4643      	mov	r3, r8
 80029a6:	18e3      	adds	r3, r4, r3
 80029a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029ac:	464b      	mov	r3, r9
 80029ae:	eb45 0303 	adc.w	r3, r5, r3
 80029b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029d2:	4629      	mov	r1, r5
 80029d4:	008b      	lsls	r3, r1, #2
 80029d6:	4621      	mov	r1, r4
 80029d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029dc:	4621      	mov	r1, r4
 80029de:	008a      	lsls	r2, r1, #2
 80029e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029e4:	f7fd fc4c 	bl	8000280 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <UART_SetConfig+0x4e4>)
 80029ee:	fba3 2302 	umull	r2, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	011c      	lsls	r4, r3, #4
 80029f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a08:	4642      	mov	r2, r8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	1891      	adds	r1, r2, r2
 8002a0e:	61b9      	str	r1, [r7, #24]
 8002a10:	415b      	adcs	r3, r3
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a18:	4641      	mov	r1, r8
 8002a1a:	1851      	adds	r1, r2, r1
 8002a1c:	6139      	str	r1, [r7, #16]
 8002a1e:	4649      	mov	r1, r9
 8002a20:	414b      	adcs	r3, r1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a30:	4659      	mov	r1, fp
 8002a32:	00cb      	lsls	r3, r1, #3
 8002a34:	4651      	mov	r1, sl
 8002a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3a:	4651      	mov	r1, sl
 8002a3c:	00ca      	lsls	r2, r1, #3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	4642      	mov	r2, r8
 8002a46:	189b      	adds	r3, r3, r2
 8002a48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a4c:	464b      	mov	r3, r9
 8002a4e:	460a      	mov	r2, r1
 8002a50:	eb42 0303 	adc.w	r3, r2, r3
 8002a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a70:	4649      	mov	r1, r9
 8002a72:	008b      	lsls	r3, r1, #2
 8002a74:	4641      	mov	r1, r8
 8002a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	008a      	lsls	r2, r1, #2
 8002a7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a82:	f7fd fbfd 	bl	8000280 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <UART_SetConfig+0x4e4>)
 8002a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2264      	movs	r2, #100	; 0x64
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	1acb      	subs	r3, r1, r3
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	3332      	adds	r3, #50	; 0x32
 8002aa0:	4a33      	ldr	r2, [pc, #204]	; (8002b70 <UART_SetConfig+0x4e4>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aac:	441c      	add	r4, r3
 8002aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ab6:	677a      	str	r2, [r7, #116]	; 0x74
 8002ab8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002acc:	4641      	mov	r1, r8
 8002ace:	1851      	adds	r1, r2, r1
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	414b      	adcs	r3, r1
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ae4:	4659      	mov	r1, fp
 8002ae6:	00cb      	lsls	r3, r1, #3
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aee:	4651      	mov	r1, sl
 8002af0:	00ca      	lsls	r2, r1, #3
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	4642      	mov	r2, r8
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002afe:	464b      	mov	r3, r9
 8002b00:	460a      	mov	r2, r1
 8002b02:	eb42 0303 	adc.w	r3, r2, r3
 8002b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	663b      	str	r3, [r7, #96]	; 0x60
 8002b12:	667a      	str	r2, [r7, #100]	; 0x64
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b20:	4649      	mov	r1, r9
 8002b22:	008b      	lsls	r3, r1, #2
 8002b24:	4641      	mov	r1, r8
 8002b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	008a      	lsls	r2, r1, #2
 8002b2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b32:	f7fd fba5 	bl	8000280 <__aeabi_uldivmod>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <UART_SetConfig+0x4e4>)
 8002b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	2164      	movs	r1, #100	; 0x64
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	3332      	adds	r3, #50	; 0x32
 8002b4e:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <UART_SetConfig+0x4e4>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4422      	add	r2, r4
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	bf00      	nop
 8002b66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b70:	51eb851f 	.word	0x51eb851f

08002b74 <std>:
 8002b74:	2300      	movs	r3, #0
 8002b76:	b510      	push	{r4, lr}
 8002b78:	4604      	mov	r4, r0
 8002b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8002b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b82:	6083      	str	r3, [r0, #8]
 8002b84:	8181      	strh	r1, [r0, #12]
 8002b86:	6643      	str	r3, [r0, #100]	; 0x64
 8002b88:	81c2      	strh	r2, [r0, #14]
 8002b8a:	6183      	str	r3, [r0, #24]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	2208      	movs	r2, #8
 8002b90:	305c      	adds	r0, #92	; 0x5c
 8002b92:	f000 f91f 	bl	8002dd4 <memset>
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <std+0x58>)
 8002b98:	6263      	str	r3, [r4, #36]	; 0x24
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <std+0x5c>)
 8002b9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <std+0x60>)
 8002ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <std+0x64>)
 8002ba4:	6323      	str	r3, [r4, #48]	; 0x30
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <std+0x68>)
 8002ba8:	6224      	str	r4, [r4, #32]
 8002baa:	429c      	cmp	r4, r3
 8002bac:	d006      	beq.n	8002bbc <std+0x48>
 8002bae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002bb2:	4294      	cmp	r4, r2
 8002bb4:	d002      	beq.n	8002bbc <std+0x48>
 8002bb6:	33d0      	adds	r3, #208	; 0xd0
 8002bb8:	429c      	cmp	r4, r3
 8002bba:	d105      	bne.n	8002bc8 <std+0x54>
 8002bbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bc4:	f000 b938 	b.w	8002e38 <__retarget_lock_init_recursive>
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	bf00      	nop
 8002bcc:	08003699 	.word	0x08003699
 8002bd0:	080036bb 	.word	0x080036bb
 8002bd4:	080036f3 	.word	0x080036f3
 8002bd8:	08003717 	.word	0x08003717
 8002bdc:	200003f0 	.word	0x200003f0

08002be0 <stdio_exit_handler>:
 8002be0:	4a02      	ldr	r2, [pc, #8]	; (8002bec <stdio_exit_handler+0xc>)
 8002be2:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <stdio_exit_handler+0x10>)
 8002be4:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <stdio_exit_handler+0x14>)
 8002be6:	f000 b869 	b.w	8002cbc <_fwalk_sglue>
 8002bea:	bf00      	nop
 8002bec:	2000000c 	.word	0x2000000c
 8002bf0:	08003631 	.word	0x08003631
 8002bf4:	20000018 	.word	0x20000018

08002bf8 <cleanup_stdio>:
 8002bf8:	6841      	ldr	r1, [r0, #4]
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <cleanup_stdio+0x34>)
 8002bfc:	4299      	cmp	r1, r3
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	4604      	mov	r4, r0
 8002c02:	d001      	beq.n	8002c08 <cleanup_stdio+0x10>
 8002c04:	f000 fd14 	bl	8003630 <_fflush_r>
 8002c08:	68a1      	ldr	r1, [r4, #8]
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <cleanup_stdio+0x38>)
 8002c0c:	4299      	cmp	r1, r3
 8002c0e:	d002      	beq.n	8002c16 <cleanup_stdio+0x1e>
 8002c10:	4620      	mov	r0, r4
 8002c12:	f000 fd0d 	bl	8003630 <_fflush_r>
 8002c16:	68e1      	ldr	r1, [r4, #12]
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <cleanup_stdio+0x3c>)
 8002c1a:	4299      	cmp	r1, r3
 8002c1c:	d004      	beq.n	8002c28 <cleanup_stdio+0x30>
 8002c1e:	4620      	mov	r0, r4
 8002c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c24:	f000 bd04 	b.w	8003630 <_fflush_r>
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200003f0 	.word	0x200003f0
 8002c30:	20000458 	.word	0x20000458
 8002c34:	200004c0 	.word	0x200004c0

08002c38 <global_stdio_init.part.0>:
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <global_stdio_init.part.0+0x30>)
 8002c3c:	4c0b      	ldr	r4, [pc, #44]	; (8002c6c <global_stdio_init.part.0+0x34>)
 8002c3e:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <global_stdio_init.part.0+0x38>)
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	4620      	mov	r0, r4
 8002c44:	2200      	movs	r2, #0
 8002c46:	2104      	movs	r1, #4
 8002c48:	f7ff ff94 	bl	8002b74 <std>
 8002c4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002c50:	2201      	movs	r2, #1
 8002c52:	2109      	movs	r1, #9
 8002c54:	f7ff ff8e 	bl	8002b74 <std>
 8002c58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c62:	2112      	movs	r1, #18
 8002c64:	f7ff bf86 	b.w	8002b74 <std>
 8002c68:	20000528 	.word	0x20000528
 8002c6c:	200003f0 	.word	0x200003f0
 8002c70:	08002be1 	.word	0x08002be1

08002c74 <__sfp_lock_acquire>:
 8002c74:	4801      	ldr	r0, [pc, #4]	; (8002c7c <__sfp_lock_acquire+0x8>)
 8002c76:	f000 b8e0 	b.w	8002e3a <__retarget_lock_acquire_recursive>
 8002c7a:	bf00      	nop
 8002c7c:	2000052d 	.word	0x2000052d

08002c80 <__sfp_lock_release>:
 8002c80:	4801      	ldr	r0, [pc, #4]	; (8002c88 <__sfp_lock_release+0x8>)
 8002c82:	f000 b8db 	b.w	8002e3c <__retarget_lock_release_recursive>
 8002c86:	bf00      	nop
 8002c88:	2000052d 	.word	0x2000052d

08002c8c <__sinit>:
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	4604      	mov	r4, r0
 8002c90:	f7ff fff0 	bl	8002c74 <__sfp_lock_acquire>
 8002c94:	6a23      	ldr	r3, [r4, #32]
 8002c96:	b11b      	cbz	r3, 8002ca0 <__sinit+0x14>
 8002c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c9c:	f7ff bff0 	b.w	8002c80 <__sfp_lock_release>
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__sinit+0x28>)
 8002ca2:	6223      	str	r3, [r4, #32]
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <__sinit+0x2c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f5      	bne.n	8002c98 <__sinit+0xc>
 8002cac:	f7ff ffc4 	bl	8002c38 <global_stdio_init.part.0>
 8002cb0:	e7f2      	b.n	8002c98 <__sinit+0xc>
 8002cb2:	bf00      	nop
 8002cb4:	08002bf9 	.word	0x08002bf9
 8002cb8:	20000528 	.word	0x20000528

08002cbc <_fwalk_sglue>:
 8002cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cc0:	4607      	mov	r7, r0
 8002cc2:	4688      	mov	r8, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8002cd0:	d505      	bpl.n	8002cde <_fwalk_sglue+0x22>
 8002cd2:	6824      	ldr	r4, [r4, #0]
 8002cd4:	2c00      	cmp	r4, #0
 8002cd6:	d1f7      	bne.n	8002cc8 <_fwalk_sglue+0xc>
 8002cd8:	4630      	mov	r0, r6
 8002cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cde:	89ab      	ldrh	r3, [r5, #12]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d907      	bls.n	8002cf4 <_fwalk_sglue+0x38>
 8002ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	d003      	beq.n	8002cf4 <_fwalk_sglue+0x38>
 8002cec:	4629      	mov	r1, r5
 8002cee:	4638      	mov	r0, r7
 8002cf0:	47c0      	blx	r8
 8002cf2:	4306      	orrs	r6, r0
 8002cf4:	3568      	adds	r5, #104	; 0x68
 8002cf6:	e7e9      	b.n	8002ccc <_fwalk_sglue+0x10>

08002cf8 <iprintf>:
 8002cf8:	b40f      	push	{r0, r1, r2, r3}
 8002cfa:	b507      	push	{r0, r1, r2, lr}
 8002cfc:	4906      	ldr	r1, [pc, #24]	; (8002d18 <iprintf+0x20>)
 8002cfe:	ab04      	add	r3, sp, #16
 8002d00:	6808      	ldr	r0, [r1, #0]
 8002d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d06:	6881      	ldr	r1, [r0, #8]
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	f000 f8c1 	bl	8002e90 <_vfiprintf_r>
 8002d0e:	b003      	add	sp, #12
 8002d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d14:	b004      	add	sp, #16
 8002d16:	4770      	bx	lr
 8002d18:	20000064 	.word	0x20000064

08002d1c <_puts_r>:
 8002d1c:	6a03      	ldr	r3, [r0, #32]
 8002d1e:	b570      	push	{r4, r5, r6, lr}
 8002d20:	6884      	ldr	r4, [r0, #8]
 8002d22:	4605      	mov	r5, r0
 8002d24:	460e      	mov	r6, r1
 8002d26:	b90b      	cbnz	r3, 8002d2c <_puts_r+0x10>
 8002d28:	f7ff ffb0 	bl	8002c8c <__sinit>
 8002d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d2e:	07db      	lsls	r3, r3, #31
 8002d30:	d405      	bmi.n	8002d3e <_puts_r+0x22>
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	0598      	lsls	r0, r3, #22
 8002d36:	d402      	bmi.n	8002d3e <_puts_r+0x22>
 8002d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d3a:	f000 f87e 	bl	8002e3a <__retarget_lock_acquire_recursive>
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	0719      	lsls	r1, r3, #28
 8002d42:	d513      	bpl.n	8002d6c <_puts_r+0x50>
 8002d44:	6923      	ldr	r3, [r4, #16]
 8002d46:	b18b      	cbz	r3, 8002d6c <_puts_r+0x50>
 8002d48:	3e01      	subs	r6, #1
 8002d4a:	68a3      	ldr	r3, [r4, #8]
 8002d4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60a3      	str	r3, [r4, #8]
 8002d54:	b9e9      	cbnz	r1, 8002d92 <_puts_r+0x76>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da2e      	bge.n	8002db8 <_puts_r+0x9c>
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	210a      	movs	r1, #10
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f000 fcdd 	bl	800371e <__swbuf_r>
 8002d64:	3001      	adds	r0, #1
 8002d66:	d007      	beq.n	8002d78 <_puts_r+0x5c>
 8002d68:	250a      	movs	r5, #10
 8002d6a:	e007      	b.n	8002d7c <_puts_r+0x60>
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	4628      	mov	r0, r5
 8002d70:	f000 fd12 	bl	8003798 <__swsetup_r>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d0e7      	beq.n	8002d48 <_puts_r+0x2c>
 8002d78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d7e:	07da      	lsls	r2, r3, #31
 8002d80:	d405      	bmi.n	8002d8e <_puts_r+0x72>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	059b      	lsls	r3, r3, #22
 8002d86:	d402      	bmi.n	8002d8e <_puts_r+0x72>
 8002d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d8a:	f000 f857 	bl	8002e3c <__retarget_lock_release_recursive>
 8002d8e:	4628      	mov	r0, r5
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da04      	bge.n	8002da0 <_puts_r+0x84>
 8002d96:	69a2      	ldr	r2, [r4, #24]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dc06      	bgt.n	8002daa <_puts_r+0x8e>
 8002d9c:	290a      	cmp	r1, #10
 8002d9e:	d004      	beq.n	8002daa <_puts_r+0x8e>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	6022      	str	r2, [r4, #0]
 8002da6:	7019      	strb	r1, [r3, #0]
 8002da8:	e7cf      	b.n	8002d4a <_puts_r+0x2e>
 8002daa:	4622      	mov	r2, r4
 8002dac:	4628      	mov	r0, r5
 8002dae:	f000 fcb6 	bl	800371e <__swbuf_r>
 8002db2:	3001      	adds	r0, #1
 8002db4:	d1c9      	bne.n	8002d4a <_puts_r+0x2e>
 8002db6:	e7df      	b.n	8002d78 <_puts_r+0x5c>
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	250a      	movs	r5, #10
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	6022      	str	r2, [r4, #0]
 8002dc0:	701d      	strb	r5, [r3, #0]
 8002dc2:	e7db      	b.n	8002d7c <_puts_r+0x60>

08002dc4 <puts>:
 8002dc4:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <puts+0xc>)
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	f7ff bfa7 	b.w	8002d1c <_puts_r>
 8002dce:	bf00      	nop
 8002dd0:	20000064 	.word	0x20000064

08002dd4 <memset>:
 8002dd4:	4402      	add	r2, r0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <__errno>:
 8002de4:	4b01      	ldr	r3, [pc, #4]	; (8002dec <__errno+0x8>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000064 	.word	0x20000064

08002df0 <__libc_init_array>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4d0d      	ldr	r5, [pc, #52]	; (8002e28 <__libc_init_array+0x38>)
 8002df4:	4c0d      	ldr	r4, [pc, #52]	; (8002e2c <__libc_init_array+0x3c>)
 8002df6:	1b64      	subs	r4, r4, r5
 8002df8:	10a4      	asrs	r4, r4, #2
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	42a6      	cmp	r6, r4
 8002dfe:	d109      	bne.n	8002e14 <__libc_init_array+0x24>
 8002e00:	4d0b      	ldr	r5, [pc, #44]	; (8002e30 <__libc_init_array+0x40>)
 8002e02:	4c0c      	ldr	r4, [pc, #48]	; (8002e34 <__libc_init_array+0x44>)
 8002e04:	f000 fe46 	bl	8003a94 <_init>
 8002e08:	1b64      	subs	r4, r4, r5
 8002e0a:	10a4      	asrs	r4, r4, #2
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	42a6      	cmp	r6, r4
 8002e10:	d105      	bne.n	8002e1e <__libc_init_array+0x2e>
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e18:	4798      	blx	r3
 8002e1a:	3601      	adds	r6, #1
 8002e1c:	e7ee      	b.n	8002dfc <__libc_init_array+0xc>
 8002e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e22:	4798      	blx	r3
 8002e24:	3601      	adds	r6, #1
 8002e26:	e7f2      	b.n	8002e0e <__libc_init_array+0x1e>
 8002e28:	08003b10 	.word	0x08003b10
 8002e2c:	08003b10 	.word	0x08003b10
 8002e30:	08003b10 	.word	0x08003b10
 8002e34:	08003b14 	.word	0x08003b14

08002e38 <__retarget_lock_init_recursive>:
 8002e38:	4770      	bx	lr

08002e3a <__retarget_lock_acquire_recursive>:
 8002e3a:	4770      	bx	lr

08002e3c <__retarget_lock_release_recursive>:
 8002e3c:	4770      	bx	lr

08002e3e <__sfputc_r>:
 8002e3e:	6893      	ldr	r3, [r2, #8]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	b410      	push	{r4}
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	da08      	bge.n	8002e5c <__sfputc_r+0x1e>
 8002e4a:	6994      	ldr	r4, [r2, #24]
 8002e4c:	42a3      	cmp	r3, r4
 8002e4e:	db01      	blt.n	8002e54 <__sfputc_r+0x16>
 8002e50:	290a      	cmp	r1, #10
 8002e52:	d103      	bne.n	8002e5c <__sfputc_r+0x1e>
 8002e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e58:	f000 bc61 	b.w	800371e <__swbuf_r>
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	1c58      	adds	r0, r3, #1
 8002e60:	6010      	str	r0, [r2, #0]
 8002e62:	7019      	strb	r1, [r3, #0]
 8002e64:	4608      	mov	r0, r1
 8002e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <__sfputs_r>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	4606      	mov	r6, r0
 8002e70:	460f      	mov	r7, r1
 8002e72:	4614      	mov	r4, r2
 8002e74:	18d5      	adds	r5, r2, r3
 8002e76:	42ac      	cmp	r4, r5
 8002e78:	d101      	bne.n	8002e7e <__sfputs_r+0x12>
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e007      	b.n	8002e8e <__sfputs_r+0x22>
 8002e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e82:	463a      	mov	r2, r7
 8002e84:	4630      	mov	r0, r6
 8002e86:	f7ff ffda 	bl	8002e3e <__sfputc_r>
 8002e8a:	1c43      	adds	r3, r0, #1
 8002e8c:	d1f3      	bne.n	8002e76 <__sfputs_r+0xa>
 8002e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e90 <_vfiprintf_r>:
 8002e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e94:	460d      	mov	r5, r1
 8002e96:	b09d      	sub	sp, #116	; 0x74
 8002e98:	4614      	mov	r4, r2
 8002e9a:	4698      	mov	r8, r3
 8002e9c:	4606      	mov	r6, r0
 8002e9e:	b118      	cbz	r0, 8002ea8 <_vfiprintf_r+0x18>
 8002ea0:	6a03      	ldr	r3, [r0, #32]
 8002ea2:	b90b      	cbnz	r3, 8002ea8 <_vfiprintf_r+0x18>
 8002ea4:	f7ff fef2 	bl	8002c8c <__sinit>
 8002ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002eaa:	07d9      	lsls	r1, r3, #31
 8002eac:	d405      	bmi.n	8002eba <_vfiprintf_r+0x2a>
 8002eae:	89ab      	ldrh	r3, [r5, #12]
 8002eb0:	059a      	lsls	r2, r3, #22
 8002eb2:	d402      	bmi.n	8002eba <_vfiprintf_r+0x2a>
 8002eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eb6:	f7ff ffc0 	bl	8002e3a <__retarget_lock_acquire_recursive>
 8002eba:	89ab      	ldrh	r3, [r5, #12]
 8002ebc:	071b      	lsls	r3, r3, #28
 8002ebe:	d501      	bpl.n	8002ec4 <_vfiprintf_r+0x34>
 8002ec0:	692b      	ldr	r3, [r5, #16]
 8002ec2:	b99b      	cbnz	r3, 8002eec <_vfiprintf_r+0x5c>
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	f000 fc66 	bl	8003798 <__swsetup_r>
 8002ecc:	b170      	cbz	r0, 8002eec <_vfiprintf_r+0x5c>
 8002ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ed0:	07dc      	lsls	r4, r3, #31
 8002ed2:	d504      	bpl.n	8002ede <_vfiprintf_r+0x4e>
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed8:	b01d      	add	sp, #116	; 0x74
 8002eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ede:	89ab      	ldrh	r3, [r5, #12]
 8002ee0:	0598      	lsls	r0, r3, #22
 8002ee2:	d4f7      	bmi.n	8002ed4 <_vfiprintf_r+0x44>
 8002ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ee6:	f7ff ffa9 	bl	8002e3c <__retarget_lock_release_recursive>
 8002eea:	e7f3      	b.n	8002ed4 <_vfiprintf_r+0x44>
 8002eec:	2300      	movs	r3, #0
 8002eee:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002efa:	2330      	movs	r3, #48	; 0x30
 8002efc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80030b0 <_vfiprintf_r+0x220>
 8002f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f04:	f04f 0901 	mov.w	r9, #1
 8002f08:	4623      	mov	r3, r4
 8002f0a:	469a      	mov	sl, r3
 8002f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f10:	b10a      	cbz	r2, 8002f16 <_vfiprintf_r+0x86>
 8002f12:	2a25      	cmp	r2, #37	; 0x25
 8002f14:	d1f9      	bne.n	8002f0a <_vfiprintf_r+0x7a>
 8002f16:	ebba 0b04 	subs.w	fp, sl, r4
 8002f1a:	d00b      	beq.n	8002f34 <_vfiprintf_r+0xa4>
 8002f1c:	465b      	mov	r3, fp
 8002f1e:	4622      	mov	r2, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	4630      	mov	r0, r6
 8002f24:	f7ff ffa2 	bl	8002e6c <__sfputs_r>
 8002f28:	3001      	adds	r0, #1
 8002f2a:	f000 80a9 	beq.w	8003080 <_vfiprintf_r+0x1f0>
 8002f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f30:	445a      	add	r2, fp
 8002f32:	9209      	str	r2, [sp, #36]	; 0x24
 8002f34:	f89a 3000 	ldrb.w	r3, [sl]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a1 	beq.w	8003080 <_vfiprintf_r+0x1f0>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f48:	f10a 0a01 	add.w	sl, sl, #1
 8002f4c:	9304      	str	r3, [sp, #16]
 8002f4e:	9307      	str	r3, [sp, #28]
 8002f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f54:	931a      	str	r3, [sp, #104]	; 0x68
 8002f56:	4654      	mov	r4, sl
 8002f58:	2205      	movs	r2, #5
 8002f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f5e:	4854      	ldr	r0, [pc, #336]	; (80030b0 <_vfiprintf_r+0x220>)
 8002f60:	f7fd f93e 	bl	80001e0 <memchr>
 8002f64:	9a04      	ldr	r2, [sp, #16]
 8002f66:	b9d8      	cbnz	r0, 8002fa0 <_vfiprintf_r+0x110>
 8002f68:	06d1      	lsls	r1, r2, #27
 8002f6a:	bf44      	itt	mi
 8002f6c:	2320      	movmi	r3, #32
 8002f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f72:	0713      	lsls	r3, r2, #28
 8002f74:	bf44      	itt	mi
 8002f76:	232b      	movmi	r3, #43	; 0x2b
 8002f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8002f80:	2b2a      	cmp	r3, #42	; 0x2a
 8002f82:	d015      	beq.n	8002fb0 <_vfiprintf_r+0x120>
 8002f84:	9a07      	ldr	r2, [sp, #28]
 8002f86:	4654      	mov	r4, sl
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f04f 0c0a 	mov.w	ip, #10
 8002f8e:	4621      	mov	r1, r4
 8002f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f94:	3b30      	subs	r3, #48	; 0x30
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d94d      	bls.n	8003036 <_vfiprintf_r+0x1a6>
 8002f9a:	b1b0      	cbz	r0, 8002fca <_vfiprintf_r+0x13a>
 8002f9c:	9207      	str	r2, [sp, #28]
 8002f9e:	e014      	b.n	8002fca <_vfiprintf_r+0x13a>
 8002fa0:	eba0 0308 	sub.w	r3, r0, r8
 8002fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	9304      	str	r3, [sp, #16]
 8002fac:	46a2      	mov	sl, r4
 8002fae:	e7d2      	b.n	8002f56 <_vfiprintf_r+0xc6>
 8002fb0:	9b03      	ldr	r3, [sp, #12]
 8002fb2:	1d19      	adds	r1, r3, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	9103      	str	r1, [sp, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bfbb      	ittet	lt
 8002fbc:	425b      	neglt	r3, r3
 8002fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8002fc2:	9307      	strge	r3, [sp, #28]
 8002fc4:	9307      	strlt	r3, [sp, #28]
 8002fc6:	bfb8      	it	lt
 8002fc8:	9204      	strlt	r2, [sp, #16]
 8002fca:	7823      	ldrb	r3, [r4, #0]
 8002fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8002fce:	d10c      	bne.n	8002fea <_vfiprintf_r+0x15a>
 8002fd0:	7863      	ldrb	r3, [r4, #1]
 8002fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd4:	d134      	bne.n	8003040 <_vfiprintf_r+0x1b0>
 8002fd6:	9b03      	ldr	r3, [sp, #12]
 8002fd8:	1d1a      	adds	r2, r3, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	9203      	str	r2, [sp, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bfb8      	it	lt
 8002fe2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002fe6:	3402      	adds	r4, #2
 8002fe8:	9305      	str	r3, [sp, #20]
 8002fea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80030c0 <_vfiprintf_r+0x230>
 8002fee:	7821      	ldrb	r1, [r4, #0]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	4650      	mov	r0, sl
 8002ff4:	f7fd f8f4 	bl	80001e0 <memchr>
 8002ff8:	b138      	cbz	r0, 800300a <_vfiprintf_r+0x17a>
 8002ffa:	9b04      	ldr	r3, [sp, #16]
 8002ffc:	eba0 000a 	sub.w	r0, r0, sl
 8003000:	2240      	movs	r2, #64	; 0x40
 8003002:	4082      	lsls	r2, r0
 8003004:	4313      	orrs	r3, r2
 8003006:	3401      	adds	r4, #1
 8003008:	9304      	str	r3, [sp, #16]
 800300a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800300e:	4829      	ldr	r0, [pc, #164]	; (80030b4 <_vfiprintf_r+0x224>)
 8003010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003014:	2206      	movs	r2, #6
 8003016:	f7fd f8e3 	bl	80001e0 <memchr>
 800301a:	2800      	cmp	r0, #0
 800301c:	d03f      	beq.n	800309e <_vfiprintf_r+0x20e>
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <_vfiprintf_r+0x228>)
 8003020:	bb1b      	cbnz	r3, 800306a <_vfiprintf_r+0x1da>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	3307      	adds	r3, #7
 8003026:	f023 0307 	bic.w	r3, r3, #7
 800302a:	3308      	adds	r3, #8
 800302c:	9303      	str	r3, [sp, #12]
 800302e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003030:	443b      	add	r3, r7
 8003032:	9309      	str	r3, [sp, #36]	; 0x24
 8003034:	e768      	b.n	8002f08 <_vfiprintf_r+0x78>
 8003036:	fb0c 3202 	mla	r2, ip, r2, r3
 800303a:	460c      	mov	r4, r1
 800303c:	2001      	movs	r0, #1
 800303e:	e7a6      	b.n	8002f8e <_vfiprintf_r+0xfe>
 8003040:	2300      	movs	r3, #0
 8003042:	3401      	adds	r4, #1
 8003044:	9305      	str	r3, [sp, #20]
 8003046:	4619      	mov	r1, r3
 8003048:	f04f 0c0a 	mov.w	ip, #10
 800304c:	4620      	mov	r0, r4
 800304e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003052:	3a30      	subs	r2, #48	; 0x30
 8003054:	2a09      	cmp	r2, #9
 8003056:	d903      	bls.n	8003060 <_vfiprintf_r+0x1d0>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0c6      	beq.n	8002fea <_vfiprintf_r+0x15a>
 800305c:	9105      	str	r1, [sp, #20]
 800305e:	e7c4      	b.n	8002fea <_vfiprintf_r+0x15a>
 8003060:	fb0c 2101 	mla	r1, ip, r1, r2
 8003064:	4604      	mov	r4, r0
 8003066:	2301      	movs	r3, #1
 8003068:	e7f0      	b.n	800304c <_vfiprintf_r+0x1bc>
 800306a:	ab03      	add	r3, sp, #12
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	462a      	mov	r2, r5
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <_vfiprintf_r+0x22c>)
 8003072:	a904      	add	r1, sp, #16
 8003074:	4630      	mov	r0, r6
 8003076:	f3af 8000 	nop.w
 800307a:	4607      	mov	r7, r0
 800307c:	1c78      	adds	r0, r7, #1
 800307e:	d1d6      	bne.n	800302e <_vfiprintf_r+0x19e>
 8003080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003082:	07d9      	lsls	r1, r3, #31
 8003084:	d405      	bmi.n	8003092 <_vfiprintf_r+0x202>
 8003086:	89ab      	ldrh	r3, [r5, #12]
 8003088:	059a      	lsls	r2, r3, #22
 800308a:	d402      	bmi.n	8003092 <_vfiprintf_r+0x202>
 800308c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800308e:	f7ff fed5 	bl	8002e3c <__retarget_lock_release_recursive>
 8003092:	89ab      	ldrh	r3, [r5, #12]
 8003094:	065b      	lsls	r3, r3, #25
 8003096:	f53f af1d 	bmi.w	8002ed4 <_vfiprintf_r+0x44>
 800309a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800309c:	e71c      	b.n	8002ed8 <_vfiprintf_r+0x48>
 800309e:	ab03      	add	r3, sp, #12
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	462a      	mov	r2, r5
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <_vfiprintf_r+0x22c>)
 80030a6:	a904      	add	r1, sp, #16
 80030a8:	4630      	mov	r0, r6
 80030aa:	f000 f919 	bl	80032e0 <_printf_i>
 80030ae:	e7e4      	b.n	800307a <_vfiprintf_r+0x1ea>
 80030b0:	08003ad4 	.word	0x08003ad4
 80030b4:	08003ade 	.word	0x08003ade
 80030b8:	00000000 	.word	0x00000000
 80030bc:	08002e6d 	.word	0x08002e6d
 80030c0:	08003ada 	.word	0x08003ada

080030c4 <sbrk_aligned>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	4e0e      	ldr	r6, [pc, #56]	; (8003100 <sbrk_aligned+0x3c>)
 80030c8:	460c      	mov	r4, r1
 80030ca:	6831      	ldr	r1, [r6, #0]
 80030cc:	4605      	mov	r5, r0
 80030ce:	b911      	cbnz	r1, 80030d6 <sbrk_aligned+0x12>
 80030d0:	f000 fc72 	bl	80039b8 <_sbrk_r>
 80030d4:	6030      	str	r0, [r6, #0]
 80030d6:	4621      	mov	r1, r4
 80030d8:	4628      	mov	r0, r5
 80030da:	f000 fc6d 	bl	80039b8 <_sbrk_r>
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	d00a      	beq.n	80030f8 <sbrk_aligned+0x34>
 80030e2:	1cc4      	adds	r4, r0, #3
 80030e4:	f024 0403 	bic.w	r4, r4, #3
 80030e8:	42a0      	cmp	r0, r4
 80030ea:	d007      	beq.n	80030fc <sbrk_aligned+0x38>
 80030ec:	1a21      	subs	r1, r4, r0
 80030ee:	4628      	mov	r0, r5
 80030f0:	f000 fc62 	bl	80039b8 <_sbrk_r>
 80030f4:	3001      	adds	r0, #1
 80030f6:	d101      	bne.n	80030fc <sbrk_aligned+0x38>
 80030f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80030fc:	4620      	mov	r0, r4
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	20000534 	.word	0x20000534

08003104 <_malloc_r>:
 8003104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003108:	1ccd      	adds	r5, r1, #3
 800310a:	f025 0503 	bic.w	r5, r5, #3
 800310e:	3508      	adds	r5, #8
 8003110:	2d0c      	cmp	r5, #12
 8003112:	bf38      	it	cc
 8003114:	250c      	movcc	r5, #12
 8003116:	2d00      	cmp	r5, #0
 8003118:	4607      	mov	r7, r0
 800311a:	db01      	blt.n	8003120 <_malloc_r+0x1c>
 800311c:	42a9      	cmp	r1, r5
 800311e:	d905      	bls.n	800312c <_malloc_r+0x28>
 8003120:	230c      	movs	r3, #12
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	2600      	movs	r6, #0
 8003126:	4630      	mov	r0, r6
 8003128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800312c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003200 <_malloc_r+0xfc>
 8003130:	f000 faa6 	bl	8003680 <__malloc_lock>
 8003134:	f8d8 3000 	ldr.w	r3, [r8]
 8003138:	461c      	mov	r4, r3
 800313a:	bb5c      	cbnz	r4, 8003194 <_malloc_r+0x90>
 800313c:	4629      	mov	r1, r5
 800313e:	4638      	mov	r0, r7
 8003140:	f7ff ffc0 	bl	80030c4 <sbrk_aligned>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	4604      	mov	r4, r0
 8003148:	d155      	bne.n	80031f6 <_malloc_r+0xf2>
 800314a:	f8d8 4000 	ldr.w	r4, [r8]
 800314e:	4626      	mov	r6, r4
 8003150:	2e00      	cmp	r6, #0
 8003152:	d145      	bne.n	80031e0 <_malloc_r+0xdc>
 8003154:	2c00      	cmp	r4, #0
 8003156:	d048      	beq.n	80031ea <_malloc_r+0xe6>
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	4631      	mov	r1, r6
 800315c:	4638      	mov	r0, r7
 800315e:	eb04 0903 	add.w	r9, r4, r3
 8003162:	f000 fc29 	bl	80039b8 <_sbrk_r>
 8003166:	4581      	cmp	r9, r0
 8003168:	d13f      	bne.n	80031ea <_malloc_r+0xe6>
 800316a:	6821      	ldr	r1, [r4, #0]
 800316c:	1a6d      	subs	r5, r5, r1
 800316e:	4629      	mov	r1, r5
 8003170:	4638      	mov	r0, r7
 8003172:	f7ff ffa7 	bl	80030c4 <sbrk_aligned>
 8003176:	3001      	adds	r0, #1
 8003178:	d037      	beq.n	80031ea <_malloc_r+0xe6>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	442b      	add	r3, r5
 800317e:	6023      	str	r3, [r4, #0]
 8003180:	f8d8 3000 	ldr.w	r3, [r8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d038      	beq.n	80031fa <_malloc_r+0xf6>
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	42a2      	cmp	r2, r4
 800318c:	d12b      	bne.n	80031e6 <_malloc_r+0xe2>
 800318e:	2200      	movs	r2, #0
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	e00f      	b.n	80031b4 <_malloc_r+0xb0>
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	1b52      	subs	r2, r2, r5
 8003198:	d41f      	bmi.n	80031da <_malloc_r+0xd6>
 800319a:	2a0b      	cmp	r2, #11
 800319c:	d917      	bls.n	80031ce <_malloc_r+0xca>
 800319e:	1961      	adds	r1, r4, r5
 80031a0:	42a3      	cmp	r3, r4
 80031a2:	6025      	str	r5, [r4, #0]
 80031a4:	bf18      	it	ne
 80031a6:	6059      	strne	r1, [r3, #4]
 80031a8:	6863      	ldr	r3, [r4, #4]
 80031aa:	bf08      	it	eq
 80031ac:	f8c8 1000 	streq.w	r1, [r8]
 80031b0:	5162      	str	r2, [r4, r5]
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	4638      	mov	r0, r7
 80031b6:	f104 060b 	add.w	r6, r4, #11
 80031ba:	f000 fa67 	bl	800368c <__malloc_unlock>
 80031be:	f026 0607 	bic.w	r6, r6, #7
 80031c2:	1d23      	adds	r3, r4, #4
 80031c4:	1af2      	subs	r2, r6, r3
 80031c6:	d0ae      	beq.n	8003126 <_malloc_r+0x22>
 80031c8:	1b9b      	subs	r3, r3, r6
 80031ca:	50a3      	str	r3, [r4, r2]
 80031cc:	e7ab      	b.n	8003126 <_malloc_r+0x22>
 80031ce:	42a3      	cmp	r3, r4
 80031d0:	6862      	ldr	r2, [r4, #4]
 80031d2:	d1dd      	bne.n	8003190 <_malloc_r+0x8c>
 80031d4:	f8c8 2000 	str.w	r2, [r8]
 80031d8:	e7ec      	b.n	80031b4 <_malloc_r+0xb0>
 80031da:	4623      	mov	r3, r4
 80031dc:	6864      	ldr	r4, [r4, #4]
 80031de:	e7ac      	b.n	800313a <_malloc_r+0x36>
 80031e0:	4634      	mov	r4, r6
 80031e2:	6876      	ldr	r6, [r6, #4]
 80031e4:	e7b4      	b.n	8003150 <_malloc_r+0x4c>
 80031e6:	4613      	mov	r3, r2
 80031e8:	e7cc      	b.n	8003184 <_malloc_r+0x80>
 80031ea:	230c      	movs	r3, #12
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4638      	mov	r0, r7
 80031f0:	f000 fa4c 	bl	800368c <__malloc_unlock>
 80031f4:	e797      	b.n	8003126 <_malloc_r+0x22>
 80031f6:	6025      	str	r5, [r4, #0]
 80031f8:	e7dc      	b.n	80031b4 <_malloc_r+0xb0>
 80031fa:	605b      	str	r3, [r3, #4]
 80031fc:	deff      	udf	#255	; 0xff
 80031fe:	bf00      	nop
 8003200:	20000530 	.word	0x20000530

08003204 <_printf_common>:
 8003204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003208:	4616      	mov	r6, r2
 800320a:	4699      	mov	r9, r3
 800320c:	688a      	ldr	r2, [r1, #8]
 800320e:	690b      	ldr	r3, [r1, #16]
 8003210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003214:	4293      	cmp	r3, r2
 8003216:	bfb8      	it	lt
 8003218:	4613      	movlt	r3, r2
 800321a:	6033      	str	r3, [r6, #0]
 800321c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003220:	4607      	mov	r7, r0
 8003222:	460c      	mov	r4, r1
 8003224:	b10a      	cbz	r2, 800322a <_printf_common+0x26>
 8003226:	3301      	adds	r3, #1
 8003228:	6033      	str	r3, [r6, #0]
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	0699      	lsls	r1, r3, #26
 800322e:	bf42      	ittt	mi
 8003230:	6833      	ldrmi	r3, [r6, #0]
 8003232:	3302      	addmi	r3, #2
 8003234:	6033      	strmi	r3, [r6, #0]
 8003236:	6825      	ldr	r5, [r4, #0]
 8003238:	f015 0506 	ands.w	r5, r5, #6
 800323c:	d106      	bne.n	800324c <_printf_common+0x48>
 800323e:	f104 0a19 	add.w	sl, r4, #25
 8003242:	68e3      	ldr	r3, [r4, #12]
 8003244:	6832      	ldr	r2, [r6, #0]
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	42ab      	cmp	r3, r5
 800324a:	dc26      	bgt.n	800329a <_printf_common+0x96>
 800324c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003250:	1e13      	subs	r3, r2, #0
 8003252:	6822      	ldr	r2, [r4, #0]
 8003254:	bf18      	it	ne
 8003256:	2301      	movne	r3, #1
 8003258:	0692      	lsls	r2, r2, #26
 800325a:	d42b      	bmi.n	80032b4 <_printf_common+0xb0>
 800325c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003260:	4649      	mov	r1, r9
 8003262:	4638      	mov	r0, r7
 8003264:	47c0      	blx	r8
 8003266:	3001      	adds	r0, #1
 8003268:	d01e      	beq.n	80032a8 <_printf_common+0xa4>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	6922      	ldr	r2, [r4, #16]
 800326e:	f003 0306 	and.w	r3, r3, #6
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf02      	ittt	eq
 8003276:	68e5      	ldreq	r5, [r4, #12]
 8003278:	6833      	ldreq	r3, [r6, #0]
 800327a:	1aed      	subeq	r5, r5, r3
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	bf0c      	ite	eq
 8003280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003284:	2500      	movne	r5, #0
 8003286:	4293      	cmp	r3, r2
 8003288:	bfc4      	itt	gt
 800328a:	1a9b      	subgt	r3, r3, r2
 800328c:	18ed      	addgt	r5, r5, r3
 800328e:	2600      	movs	r6, #0
 8003290:	341a      	adds	r4, #26
 8003292:	42b5      	cmp	r5, r6
 8003294:	d11a      	bne.n	80032cc <_printf_common+0xc8>
 8003296:	2000      	movs	r0, #0
 8003298:	e008      	b.n	80032ac <_printf_common+0xa8>
 800329a:	2301      	movs	r3, #1
 800329c:	4652      	mov	r2, sl
 800329e:	4649      	mov	r1, r9
 80032a0:	4638      	mov	r0, r7
 80032a2:	47c0      	blx	r8
 80032a4:	3001      	adds	r0, #1
 80032a6:	d103      	bne.n	80032b0 <_printf_common+0xac>
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b0:	3501      	adds	r5, #1
 80032b2:	e7c6      	b.n	8003242 <_printf_common+0x3e>
 80032b4:	18e1      	adds	r1, r4, r3
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	2030      	movs	r0, #48	; 0x30
 80032ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032be:	4422      	add	r2, r4
 80032c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032c8:	3302      	adds	r3, #2
 80032ca:	e7c7      	b.n	800325c <_printf_common+0x58>
 80032cc:	2301      	movs	r3, #1
 80032ce:	4622      	mov	r2, r4
 80032d0:	4649      	mov	r1, r9
 80032d2:	4638      	mov	r0, r7
 80032d4:	47c0      	blx	r8
 80032d6:	3001      	adds	r0, #1
 80032d8:	d0e6      	beq.n	80032a8 <_printf_common+0xa4>
 80032da:	3601      	adds	r6, #1
 80032dc:	e7d9      	b.n	8003292 <_printf_common+0x8e>
	...

080032e0 <_printf_i>:
 80032e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032e4:	7e0f      	ldrb	r7, [r1, #24]
 80032e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032e8:	2f78      	cmp	r7, #120	; 0x78
 80032ea:	4691      	mov	r9, r2
 80032ec:	4680      	mov	r8, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	469a      	mov	sl, r3
 80032f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032f6:	d807      	bhi.n	8003308 <_printf_i+0x28>
 80032f8:	2f62      	cmp	r7, #98	; 0x62
 80032fa:	d80a      	bhi.n	8003312 <_printf_i+0x32>
 80032fc:	2f00      	cmp	r7, #0
 80032fe:	f000 80d4 	beq.w	80034aa <_printf_i+0x1ca>
 8003302:	2f58      	cmp	r7, #88	; 0x58
 8003304:	f000 80c0 	beq.w	8003488 <_printf_i+0x1a8>
 8003308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800330c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003310:	e03a      	b.n	8003388 <_printf_i+0xa8>
 8003312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003316:	2b15      	cmp	r3, #21
 8003318:	d8f6      	bhi.n	8003308 <_printf_i+0x28>
 800331a:	a101      	add	r1, pc, #4	; (adr r1, 8003320 <_printf_i+0x40>)
 800331c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003320:	08003379 	.word	0x08003379
 8003324:	0800338d 	.word	0x0800338d
 8003328:	08003309 	.word	0x08003309
 800332c:	08003309 	.word	0x08003309
 8003330:	08003309 	.word	0x08003309
 8003334:	08003309 	.word	0x08003309
 8003338:	0800338d 	.word	0x0800338d
 800333c:	08003309 	.word	0x08003309
 8003340:	08003309 	.word	0x08003309
 8003344:	08003309 	.word	0x08003309
 8003348:	08003309 	.word	0x08003309
 800334c:	08003491 	.word	0x08003491
 8003350:	080033b9 	.word	0x080033b9
 8003354:	0800344b 	.word	0x0800344b
 8003358:	08003309 	.word	0x08003309
 800335c:	08003309 	.word	0x08003309
 8003360:	080034b3 	.word	0x080034b3
 8003364:	08003309 	.word	0x08003309
 8003368:	080033b9 	.word	0x080033b9
 800336c:	08003309 	.word	0x08003309
 8003370:	08003309 	.word	0x08003309
 8003374:	08003453 	.word	0x08003453
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	602a      	str	r2, [r5, #0]
 8003380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003388:	2301      	movs	r3, #1
 800338a:	e09f      	b.n	80034cc <_printf_i+0x1ec>
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	682b      	ldr	r3, [r5, #0]
 8003390:	0607      	lsls	r7, r0, #24
 8003392:	f103 0104 	add.w	r1, r3, #4
 8003396:	6029      	str	r1, [r5, #0]
 8003398:	d501      	bpl.n	800339e <_printf_i+0xbe>
 800339a:	681e      	ldr	r6, [r3, #0]
 800339c:	e003      	b.n	80033a6 <_printf_i+0xc6>
 800339e:	0646      	lsls	r6, r0, #25
 80033a0:	d5fb      	bpl.n	800339a <_printf_i+0xba>
 80033a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033a6:	2e00      	cmp	r6, #0
 80033a8:	da03      	bge.n	80033b2 <_printf_i+0xd2>
 80033aa:	232d      	movs	r3, #45	; 0x2d
 80033ac:	4276      	negs	r6, r6
 80033ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b2:	485a      	ldr	r0, [pc, #360]	; (800351c <_printf_i+0x23c>)
 80033b4:	230a      	movs	r3, #10
 80033b6:	e012      	b.n	80033de <_printf_i+0xfe>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	6820      	ldr	r0, [r4, #0]
 80033bc:	1d19      	adds	r1, r3, #4
 80033be:	6029      	str	r1, [r5, #0]
 80033c0:	0605      	lsls	r5, r0, #24
 80033c2:	d501      	bpl.n	80033c8 <_printf_i+0xe8>
 80033c4:	681e      	ldr	r6, [r3, #0]
 80033c6:	e002      	b.n	80033ce <_printf_i+0xee>
 80033c8:	0641      	lsls	r1, r0, #25
 80033ca:	d5fb      	bpl.n	80033c4 <_printf_i+0xe4>
 80033cc:	881e      	ldrh	r6, [r3, #0]
 80033ce:	4853      	ldr	r0, [pc, #332]	; (800351c <_printf_i+0x23c>)
 80033d0:	2f6f      	cmp	r7, #111	; 0x6f
 80033d2:	bf0c      	ite	eq
 80033d4:	2308      	moveq	r3, #8
 80033d6:	230a      	movne	r3, #10
 80033d8:	2100      	movs	r1, #0
 80033da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033de:	6865      	ldr	r5, [r4, #4]
 80033e0:	60a5      	str	r5, [r4, #8]
 80033e2:	2d00      	cmp	r5, #0
 80033e4:	bfa2      	ittt	ge
 80033e6:	6821      	ldrge	r1, [r4, #0]
 80033e8:	f021 0104 	bicge.w	r1, r1, #4
 80033ec:	6021      	strge	r1, [r4, #0]
 80033ee:	b90e      	cbnz	r6, 80033f4 <_printf_i+0x114>
 80033f0:	2d00      	cmp	r5, #0
 80033f2:	d04b      	beq.n	800348c <_printf_i+0x1ac>
 80033f4:	4615      	mov	r5, r2
 80033f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80033fa:	fb03 6711 	mls	r7, r3, r1, r6
 80033fe:	5dc7      	ldrb	r7, [r0, r7]
 8003400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003404:	4637      	mov	r7, r6
 8003406:	42bb      	cmp	r3, r7
 8003408:	460e      	mov	r6, r1
 800340a:	d9f4      	bls.n	80033f6 <_printf_i+0x116>
 800340c:	2b08      	cmp	r3, #8
 800340e:	d10b      	bne.n	8003428 <_printf_i+0x148>
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	07de      	lsls	r6, r3, #31
 8003414:	d508      	bpl.n	8003428 <_printf_i+0x148>
 8003416:	6923      	ldr	r3, [r4, #16]
 8003418:	6861      	ldr	r1, [r4, #4]
 800341a:	4299      	cmp	r1, r3
 800341c:	bfde      	ittt	le
 800341e:	2330      	movle	r3, #48	; 0x30
 8003420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003424:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003428:	1b52      	subs	r2, r2, r5
 800342a:	6122      	str	r2, [r4, #16]
 800342c:	f8cd a000 	str.w	sl, [sp]
 8003430:	464b      	mov	r3, r9
 8003432:	aa03      	add	r2, sp, #12
 8003434:	4621      	mov	r1, r4
 8003436:	4640      	mov	r0, r8
 8003438:	f7ff fee4 	bl	8003204 <_printf_common>
 800343c:	3001      	adds	r0, #1
 800343e:	d14a      	bne.n	80034d6 <_printf_i+0x1f6>
 8003440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003444:	b004      	add	sp, #16
 8003446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f043 0320 	orr.w	r3, r3, #32
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	4833      	ldr	r0, [pc, #204]	; (8003520 <_printf_i+0x240>)
 8003454:	2778      	movs	r7, #120	; 0x78
 8003456:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	6829      	ldr	r1, [r5, #0]
 800345e:	061f      	lsls	r7, r3, #24
 8003460:	f851 6b04 	ldr.w	r6, [r1], #4
 8003464:	d402      	bmi.n	800346c <_printf_i+0x18c>
 8003466:	065f      	lsls	r7, r3, #25
 8003468:	bf48      	it	mi
 800346a:	b2b6      	uxthmi	r6, r6
 800346c:	07df      	lsls	r7, r3, #31
 800346e:	bf48      	it	mi
 8003470:	f043 0320 	orrmi.w	r3, r3, #32
 8003474:	6029      	str	r1, [r5, #0]
 8003476:	bf48      	it	mi
 8003478:	6023      	strmi	r3, [r4, #0]
 800347a:	b91e      	cbnz	r6, 8003484 <_printf_i+0x1a4>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	f023 0320 	bic.w	r3, r3, #32
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	2310      	movs	r3, #16
 8003486:	e7a7      	b.n	80033d8 <_printf_i+0xf8>
 8003488:	4824      	ldr	r0, [pc, #144]	; (800351c <_printf_i+0x23c>)
 800348a:	e7e4      	b.n	8003456 <_printf_i+0x176>
 800348c:	4615      	mov	r5, r2
 800348e:	e7bd      	b.n	800340c <_printf_i+0x12c>
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	6826      	ldr	r6, [r4, #0]
 8003494:	6961      	ldr	r1, [r4, #20]
 8003496:	1d18      	adds	r0, r3, #4
 8003498:	6028      	str	r0, [r5, #0]
 800349a:	0635      	lsls	r5, r6, #24
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	d501      	bpl.n	80034a4 <_printf_i+0x1c4>
 80034a0:	6019      	str	r1, [r3, #0]
 80034a2:	e002      	b.n	80034aa <_printf_i+0x1ca>
 80034a4:	0670      	lsls	r0, r6, #25
 80034a6:	d5fb      	bpl.n	80034a0 <_printf_i+0x1c0>
 80034a8:	8019      	strh	r1, [r3, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	4615      	mov	r5, r2
 80034b0:	e7bc      	b.n	800342c <_printf_i+0x14c>
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	602a      	str	r2, [r5, #0]
 80034b8:	681d      	ldr	r5, [r3, #0]
 80034ba:	6862      	ldr	r2, [r4, #4]
 80034bc:	2100      	movs	r1, #0
 80034be:	4628      	mov	r0, r5
 80034c0:	f7fc fe8e 	bl	80001e0 <memchr>
 80034c4:	b108      	cbz	r0, 80034ca <_printf_i+0x1ea>
 80034c6:	1b40      	subs	r0, r0, r5
 80034c8:	6060      	str	r0, [r4, #4]
 80034ca:	6863      	ldr	r3, [r4, #4]
 80034cc:	6123      	str	r3, [r4, #16]
 80034ce:	2300      	movs	r3, #0
 80034d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034d4:	e7aa      	b.n	800342c <_printf_i+0x14c>
 80034d6:	6923      	ldr	r3, [r4, #16]
 80034d8:	462a      	mov	r2, r5
 80034da:	4649      	mov	r1, r9
 80034dc:	4640      	mov	r0, r8
 80034de:	47d0      	blx	sl
 80034e0:	3001      	adds	r0, #1
 80034e2:	d0ad      	beq.n	8003440 <_printf_i+0x160>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	079b      	lsls	r3, r3, #30
 80034e8:	d413      	bmi.n	8003512 <_printf_i+0x232>
 80034ea:	68e0      	ldr	r0, [r4, #12]
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	4298      	cmp	r0, r3
 80034f0:	bfb8      	it	lt
 80034f2:	4618      	movlt	r0, r3
 80034f4:	e7a6      	b.n	8003444 <_printf_i+0x164>
 80034f6:	2301      	movs	r3, #1
 80034f8:	4632      	mov	r2, r6
 80034fa:	4649      	mov	r1, r9
 80034fc:	4640      	mov	r0, r8
 80034fe:	47d0      	blx	sl
 8003500:	3001      	adds	r0, #1
 8003502:	d09d      	beq.n	8003440 <_printf_i+0x160>
 8003504:	3501      	adds	r5, #1
 8003506:	68e3      	ldr	r3, [r4, #12]
 8003508:	9903      	ldr	r1, [sp, #12]
 800350a:	1a5b      	subs	r3, r3, r1
 800350c:	42ab      	cmp	r3, r5
 800350e:	dcf2      	bgt.n	80034f6 <_printf_i+0x216>
 8003510:	e7eb      	b.n	80034ea <_printf_i+0x20a>
 8003512:	2500      	movs	r5, #0
 8003514:	f104 0619 	add.w	r6, r4, #25
 8003518:	e7f5      	b.n	8003506 <_printf_i+0x226>
 800351a:	bf00      	nop
 800351c:	08003ae5 	.word	0x08003ae5
 8003520:	08003af6 	.word	0x08003af6

08003524 <__sflush_r>:
 8003524:	898a      	ldrh	r2, [r1, #12]
 8003526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352a:	4605      	mov	r5, r0
 800352c:	0710      	lsls	r0, r2, #28
 800352e:	460c      	mov	r4, r1
 8003530:	d458      	bmi.n	80035e4 <__sflush_r+0xc0>
 8003532:	684b      	ldr	r3, [r1, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	dc05      	bgt.n	8003544 <__sflush_r+0x20>
 8003538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	dc02      	bgt.n	8003544 <__sflush_r+0x20>
 800353e:	2000      	movs	r0, #0
 8003540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003546:	2e00      	cmp	r6, #0
 8003548:	d0f9      	beq.n	800353e <__sflush_r+0x1a>
 800354a:	2300      	movs	r3, #0
 800354c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003550:	682f      	ldr	r7, [r5, #0]
 8003552:	6a21      	ldr	r1, [r4, #32]
 8003554:	602b      	str	r3, [r5, #0]
 8003556:	d032      	beq.n	80035be <__sflush_r+0x9a>
 8003558:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	075a      	lsls	r2, r3, #29
 800355e:	d505      	bpl.n	800356c <__sflush_r+0x48>
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	1ac0      	subs	r0, r0, r3
 8003564:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003566:	b10b      	cbz	r3, 800356c <__sflush_r+0x48>
 8003568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800356a:	1ac0      	subs	r0, r0, r3
 800356c:	2300      	movs	r3, #0
 800356e:	4602      	mov	r2, r0
 8003570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003572:	6a21      	ldr	r1, [r4, #32]
 8003574:	4628      	mov	r0, r5
 8003576:	47b0      	blx	r6
 8003578:	1c43      	adds	r3, r0, #1
 800357a:	89a3      	ldrh	r3, [r4, #12]
 800357c:	d106      	bne.n	800358c <__sflush_r+0x68>
 800357e:	6829      	ldr	r1, [r5, #0]
 8003580:	291d      	cmp	r1, #29
 8003582:	d82b      	bhi.n	80035dc <__sflush_r+0xb8>
 8003584:	4a29      	ldr	r2, [pc, #164]	; (800362c <__sflush_r+0x108>)
 8003586:	410a      	asrs	r2, r1
 8003588:	07d6      	lsls	r6, r2, #31
 800358a:	d427      	bmi.n	80035dc <__sflush_r+0xb8>
 800358c:	2200      	movs	r2, #0
 800358e:	6062      	str	r2, [r4, #4]
 8003590:	04d9      	lsls	r1, r3, #19
 8003592:	6922      	ldr	r2, [r4, #16]
 8003594:	6022      	str	r2, [r4, #0]
 8003596:	d504      	bpl.n	80035a2 <__sflush_r+0x7e>
 8003598:	1c42      	adds	r2, r0, #1
 800359a:	d101      	bne.n	80035a0 <__sflush_r+0x7c>
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	b903      	cbnz	r3, 80035a2 <__sflush_r+0x7e>
 80035a0:	6560      	str	r0, [r4, #84]	; 0x54
 80035a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035a4:	602f      	str	r7, [r5, #0]
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d0c9      	beq.n	800353e <__sflush_r+0x1a>
 80035aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ae:	4299      	cmp	r1, r3
 80035b0:	d002      	beq.n	80035b8 <__sflush_r+0x94>
 80035b2:	4628      	mov	r0, r5
 80035b4:	f000 fa22 	bl	80039fc <_free_r>
 80035b8:	2000      	movs	r0, #0
 80035ba:	6360      	str	r0, [r4, #52]	; 0x34
 80035bc:	e7c0      	b.n	8003540 <__sflush_r+0x1c>
 80035be:	2301      	movs	r3, #1
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b0      	blx	r6
 80035c4:	1c41      	adds	r1, r0, #1
 80035c6:	d1c8      	bne.n	800355a <__sflush_r+0x36>
 80035c8:	682b      	ldr	r3, [r5, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0c5      	beq.n	800355a <__sflush_r+0x36>
 80035ce:	2b1d      	cmp	r3, #29
 80035d0:	d001      	beq.n	80035d6 <__sflush_r+0xb2>
 80035d2:	2b16      	cmp	r3, #22
 80035d4:	d101      	bne.n	80035da <__sflush_r+0xb6>
 80035d6:	602f      	str	r7, [r5, #0]
 80035d8:	e7b1      	b.n	800353e <__sflush_r+0x1a>
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e0:	81a3      	strh	r3, [r4, #12]
 80035e2:	e7ad      	b.n	8003540 <__sflush_r+0x1c>
 80035e4:	690f      	ldr	r7, [r1, #16]
 80035e6:	2f00      	cmp	r7, #0
 80035e8:	d0a9      	beq.n	800353e <__sflush_r+0x1a>
 80035ea:	0793      	lsls	r3, r2, #30
 80035ec:	680e      	ldr	r6, [r1, #0]
 80035ee:	bf08      	it	eq
 80035f0:	694b      	ldreq	r3, [r1, #20]
 80035f2:	600f      	str	r7, [r1, #0]
 80035f4:	bf18      	it	ne
 80035f6:	2300      	movne	r3, #0
 80035f8:	eba6 0807 	sub.w	r8, r6, r7
 80035fc:	608b      	str	r3, [r1, #8]
 80035fe:	f1b8 0f00 	cmp.w	r8, #0
 8003602:	dd9c      	ble.n	800353e <__sflush_r+0x1a>
 8003604:	6a21      	ldr	r1, [r4, #32]
 8003606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003608:	4643      	mov	r3, r8
 800360a:	463a      	mov	r2, r7
 800360c:	4628      	mov	r0, r5
 800360e:	47b0      	blx	r6
 8003610:	2800      	cmp	r0, #0
 8003612:	dc06      	bgt.n	8003622 <__sflush_r+0xfe>
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003620:	e78e      	b.n	8003540 <__sflush_r+0x1c>
 8003622:	4407      	add	r7, r0
 8003624:	eba8 0800 	sub.w	r8, r8, r0
 8003628:	e7e9      	b.n	80035fe <__sflush_r+0xda>
 800362a:	bf00      	nop
 800362c:	dfbffffe 	.word	0xdfbffffe

08003630 <_fflush_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	690b      	ldr	r3, [r1, #16]
 8003634:	4605      	mov	r5, r0
 8003636:	460c      	mov	r4, r1
 8003638:	b913      	cbnz	r3, 8003640 <_fflush_r+0x10>
 800363a:	2500      	movs	r5, #0
 800363c:	4628      	mov	r0, r5
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	b118      	cbz	r0, 800364a <_fflush_r+0x1a>
 8003642:	6a03      	ldr	r3, [r0, #32]
 8003644:	b90b      	cbnz	r3, 800364a <_fflush_r+0x1a>
 8003646:	f7ff fb21 	bl	8002c8c <__sinit>
 800364a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f3      	beq.n	800363a <_fflush_r+0xa>
 8003652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003654:	07d0      	lsls	r0, r2, #31
 8003656:	d404      	bmi.n	8003662 <_fflush_r+0x32>
 8003658:	0599      	lsls	r1, r3, #22
 800365a:	d402      	bmi.n	8003662 <_fflush_r+0x32>
 800365c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800365e:	f7ff fbec 	bl	8002e3a <__retarget_lock_acquire_recursive>
 8003662:	4628      	mov	r0, r5
 8003664:	4621      	mov	r1, r4
 8003666:	f7ff ff5d 	bl	8003524 <__sflush_r>
 800366a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800366c:	07da      	lsls	r2, r3, #31
 800366e:	4605      	mov	r5, r0
 8003670:	d4e4      	bmi.n	800363c <_fflush_r+0xc>
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	059b      	lsls	r3, r3, #22
 8003676:	d4e1      	bmi.n	800363c <_fflush_r+0xc>
 8003678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800367a:	f7ff fbdf 	bl	8002e3c <__retarget_lock_release_recursive>
 800367e:	e7dd      	b.n	800363c <_fflush_r+0xc>

08003680 <__malloc_lock>:
 8003680:	4801      	ldr	r0, [pc, #4]	; (8003688 <__malloc_lock+0x8>)
 8003682:	f7ff bbda 	b.w	8002e3a <__retarget_lock_acquire_recursive>
 8003686:	bf00      	nop
 8003688:	2000052c 	.word	0x2000052c

0800368c <__malloc_unlock>:
 800368c:	4801      	ldr	r0, [pc, #4]	; (8003694 <__malloc_unlock+0x8>)
 800368e:	f7ff bbd5 	b.w	8002e3c <__retarget_lock_release_recursive>
 8003692:	bf00      	nop
 8003694:	2000052c 	.word	0x2000052c

08003698 <__sread>:
 8003698:	b510      	push	{r4, lr}
 800369a:	460c      	mov	r4, r1
 800369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a0:	f000 f978 	bl	8003994 <_read_r>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	bfab      	itete	ge
 80036a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036aa:	89a3      	ldrhlt	r3, [r4, #12]
 80036ac:	181b      	addge	r3, r3, r0
 80036ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036b2:	bfac      	ite	ge
 80036b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80036b6:	81a3      	strhlt	r3, [r4, #12]
 80036b8:	bd10      	pop	{r4, pc}

080036ba <__swrite>:
 80036ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036be:	461f      	mov	r7, r3
 80036c0:	898b      	ldrh	r3, [r1, #12]
 80036c2:	05db      	lsls	r3, r3, #23
 80036c4:	4605      	mov	r5, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	4616      	mov	r6, r2
 80036ca:	d505      	bpl.n	80036d8 <__swrite+0x1e>
 80036cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d0:	2302      	movs	r3, #2
 80036d2:	2200      	movs	r2, #0
 80036d4:	f000 f94c 	bl	8003970 <_lseek_r>
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	4632      	mov	r2, r6
 80036e6:	463b      	mov	r3, r7
 80036e8:	4628      	mov	r0, r5
 80036ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ee:	f000 b973 	b.w	80039d8 <_write_r>

080036f2 <__sseek>:
 80036f2:	b510      	push	{r4, lr}
 80036f4:	460c      	mov	r4, r1
 80036f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036fa:	f000 f939 	bl	8003970 <_lseek_r>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	bf15      	itete	ne
 8003704:	6560      	strne	r0, [r4, #84]	; 0x54
 8003706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800370a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800370e:	81a3      	strheq	r3, [r4, #12]
 8003710:	bf18      	it	ne
 8003712:	81a3      	strhne	r3, [r4, #12]
 8003714:	bd10      	pop	{r4, pc}

08003716 <__sclose>:
 8003716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371a:	f000 b8f7 	b.w	800390c <_close_r>

0800371e <__swbuf_r>:
 800371e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003720:	460e      	mov	r6, r1
 8003722:	4614      	mov	r4, r2
 8003724:	4605      	mov	r5, r0
 8003726:	b118      	cbz	r0, 8003730 <__swbuf_r+0x12>
 8003728:	6a03      	ldr	r3, [r0, #32]
 800372a:	b90b      	cbnz	r3, 8003730 <__swbuf_r+0x12>
 800372c:	f7ff faae 	bl	8002c8c <__sinit>
 8003730:	69a3      	ldr	r3, [r4, #24]
 8003732:	60a3      	str	r3, [r4, #8]
 8003734:	89a3      	ldrh	r3, [r4, #12]
 8003736:	071a      	lsls	r2, r3, #28
 8003738:	d525      	bpl.n	8003786 <__swbuf_r+0x68>
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	b31b      	cbz	r3, 8003786 <__swbuf_r+0x68>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	6922      	ldr	r2, [r4, #16]
 8003742:	1a98      	subs	r0, r3, r2
 8003744:	6963      	ldr	r3, [r4, #20]
 8003746:	b2f6      	uxtb	r6, r6
 8003748:	4283      	cmp	r3, r0
 800374a:	4637      	mov	r7, r6
 800374c:	dc04      	bgt.n	8003758 <__swbuf_r+0x3a>
 800374e:	4621      	mov	r1, r4
 8003750:	4628      	mov	r0, r5
 8003752:	f7ff ff6d 	bl	8003630 <_fflush_r>
 8003756:	b9e0      	cbnz	r0, 8003792 <__swbuf_r+0x74>
 8003758:	68a3      	ldr	r3, [r4, #8]
 800375a:	3b01      	subs	r3, #1
 800375c:	60a3      	str	r3, [r4, #8]
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	6022      	str	r2, [r4, #0]
 8003764:	701e      	strb	r6, [r3, #0]
 8003766:	6962      	ldr	r2, [r4, #20]
 8003768:	1c43      	adds	r3, r0, #1
 800376a:	429a      	cmp	r2, r3
 800376c:	d004      	beq.n	8003778 <__swbuf_r+0x5a>
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	07db      	lsls	r3, r3, #31
 8003772:	d506      	bpl.n	8003782 <__swbuf_r+0x64>
 8003774:	2e0a      	cmp	r6, #10
 8003776:	d104      	bne.n	8003782 <__swbuf_r+0x64>
 8003778:	4621      	mov	r1, r4
 800377a:	4628      	mov	r0, r5
 800377c:	f7ff ff58 	bl	8003630 <_fflush_r>
 8003780:	b938      	cbnz	r0, 8003792 <__swbuf_r+0x74>
 8003782:	4638      	mov	r0, r7
 8003784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003786:	4621      	mov	r1, r4
 8003788:	4628      	mov	r0, r5
 800378a:	f000 f805 	bl	8003798 <__swsetup_r>
 800378e:	2800      	cmp	r0, #0
 8003790:	d0d5      	beq.n	800373e <__swbuf_r+0x20>
 8003792:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003796:	e7f4      	b.n	8003782 <__swbuf_r+0x64>

08003798 <__swsetup_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <__swsetup_r+0xac>)
 800379c:	4605      	mov	r5, r0
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	460c      	mov	r4, r1
 80037a2:	b118      	cbz	r0, 80037ac <__swsetup_r+0x14>
 80037a4:	6a03      	ldr	r3, [r0, #32]
 80037a6:	b90b      	cbnz	r3, 80037ac <__swsetup_r+0x14>
 80037a8:	f7ff fa70 	bl	8002c8c <__sinit>
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037b2:	0718      	lsls	r0, r3, #28
 80037b4:	d422      	bmi.n	80037fc <__swsetup_r+0x64>
 80037b6:	06d9      	lsls	r1, r3, #27
 80037b8:	d407      	bmi.n	80037ca <__swsetup_r+0x32>
 80037ba:	2309      	movs	r3, #9
 80037bc:	602b      	str	r3, [r5, #0]
 80037be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037c2:	81a3      	strh	r3, [r4, #12]
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037c8:	e034      	b.n	8003834 <__swsetup_r+0x9c>
 80037ca:	0758      	lsls	r0, r3, #29
 80037cc:	d512      	bpl.n	80037f4 <__swsetup_r+0x5c>
 80037ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d0:	b141      	cbz	r1, 80037e4 <__swsetup_r+0x4c>
 80037d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037d6:	4299      	cmp	r1, r3
 80037d8:	d002      	beq.n	80037e0 <__swsetup_r+0x48>
 80037da:	4628      	mov	r0, r5
 80037dc:	f000 f90e 	bl	80039fc <_free_r>
 80037e0:	2300      	movs	r3, #0
 80037e2:	6363      	str	r3, [r4, #52]	; 0x34
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037ea:	81a3      	strh	r3, [r4, #12]
 80037ec:	2300      	movs	r3, #0
 80037ee:	6063      	str	r3, [r4, #4]
 80037f0:	6923      	ldr	r3, [r4, #16]
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f043 0308 	orr.w	r3, r3, #8
 80037fa:	81a3      	strh	r3, [r4, #12]
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	b94b      	cbnz	r3, 8003814 <__swsetup_r+0x7c>
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380a:	d003      	beq.n	8003814 <__swsetup_r+0x7c>
 800380c:	4621      	mov	r1, r4
 800380e:	4628      	mov	r0, r5
 8003810:	f000 f840 	bl	8003894 <__smakebuf_r>
 8003814:	89a0      	ldrh	r0, [r4, #12]
 8003816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800381a:	f010 0301 	ands.w	r3, r0, #1
 800381e:	d00a      	beq.n	8003836 <__swsetup_r+0x9e>
 8003820:	2300      	movs	r3, #0
 8003822:	60a3      	str	r3, [r4, #8]
 8003824:	6963      	ldr	r3, [r4, #20]
 8003826:	425b      	negs	r3, r3
 8003828:	61a3      	str	r3, [r4, #24]
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	b943      	cbnz	r3, 8003840 <__swsetup_r+0xa8>
 800382e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003832:	d1c4      	bne.n	80037be <__swsetup_r+0x26>
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	0781      	lsls	r1, r0, #30
 8003838:	bf58      	it	pl
 800383a:	6963      	ldrpl	r3, [r4, #20]
 800383c:	60a3      	str	r3, [r4, #8]
 800383e:	e7f4      	b.n	800382a <__swsetup_r+0x92>
 8003840:	2000      	movs	r0, #0
 8003842:	e7f7      	b.n	8003834 <__swsetup_r+0x9c>
 8003844:	20000064 	.word	0x20000064

08003848 <__swhatbuf_r>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	460c      	mov	r4, r1
 800384c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003850:	2900      	cmp	r1, #0
 8003852:	b096      	sub	sp, #88	; 0x58
 8003854:	4615      	mov	r5, r2
 8003856:	461e      	mov	r6, r3
 8003858:	da0d      	bge.n	8003876 <__swhatbuf_r+0x2e>
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	bf0c      	ite	eq
 8003866:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800386a:	2340      	movne	r3, #64	; 0x40
 800386c:	2000      	movs	r0, #0
 800386e:	6031      	str	r1, [r6, #0]
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	b016      	add	sp, #88	; 0x58
 8003874:	bd70      	pop	{r4, r5, r6, pc}
 8003876:	466a      	mov	r2, sp
 8003878:	f000 f858 	bl	800392c <_fstat_r>
 800387c:	2800      	cmp	r0, #0
 800387e:	dbec      	blt.n	800385a <__swhatbuf_r+0x12>
 8003880:	9901      	ldr	r1, [sp, #4]
 8003882:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003886:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800388a:	4259      	negs	r1, r3
 800388c:	4159      	adcs	r1, r3
 800388e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003892:	e7eb      	b.n	800386c <__swhatbuf_r+0x24>

08003894 <__smakebuf_r>:
 8003894:	898b      	ldrh	r3, [r1, #12]
 8003896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003898:	079d      	lsls	r5, r3, #30
 800389a:	4606      	mov	r6, r0
 800389c:	460c      	mov	r4, r1
 800389e:	d507      	bpl.n	80038b0 <__smakebuf_r+0x1c>
 80038a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	6123      	str	r3, [r4, #16]
 80038a8:	2301      	movs	r3, #1
 80038aa:	6163      	str	r3, [r4, #20]
 80038ac:	b002      	add	sp, #8
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	ab01      	add	r3, sp, #4
 80038b2:	466a      	mov	r2, sp
 80038b4:	f7ff ffc8 	bl	8003848 <__swhatbuf_r>
 80038b8:	9900      	ldr	r1, [sp, #0]
 80038ba:	4605      	mov	r5, r0
 80038bc:	4630      	mov	r0, r6
 80038be:	f7ff fc21 	bl	8003104 <_malloc_r>
 80038c2:	b948      	cbnz	r0, 80038d8 <__smakebuf_r+0x44>
 80038c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c8:	059a      	lsls	r2, r3, #22
 80038ca:	d4ef      	bmi.n	80038ac <__smakebuf_r+0x18>
 80038cc:	f023 0303 	bic.w	r3, r3, #3
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	e7e3      	b.n	80038a0 <__smakebuf_r+0xc>
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	6020      	str	r0, [r4, #0]
 80038dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e0:	81a3      	strh	r3, [r4, #12]
 80038e2:	9b00      	ldr	r3, [sp, #0]
 80038e4:	6163      	str	r3, [r4, #20]
 80038e6:	9b01      	ldr	r3, [sp, #4]
 80038e8:	6120      	str	r0, [r4, #16]
 80038ea:	b15b      	cbz	r3, 8003904 <__smakebuf_r+0x70>
 80038ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038f0:	4630      	mov	r0, r6
 80038f2:	f000 f82d 	bl	8003950 <_isatty_r>
 80038f6:	b128      	cbz	r0, 8003904 <__smakebuf_r+0x70>
 80038f8:	89a3      	ldrh	r3, [r4, #12]
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	81a3      	strh	r3, [r4, #12]
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	431d      	orrs	r5, r3
 8003908:	81a5      	strh	r5, [r4, #12]
 800390a:	e7cf      	b.n	80038ac <__smakebuf_r+0x18>

0800390c <_close_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d06      	ldr	r5, [pc, #24]	; (8003928 <_close_r+0x1c>)
 8003910:	2300      	movs	r3, #0
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	f7fd fbff 	bl	800111a <_close>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_close_r+0x1a>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_close_r+0x1a>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	20000538 	.word	0x20000538

0800392c <_fstat_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4d07      	ldr	r5, [pc, #28]	; (800394c <_fstat_r+0x20>)
 8003930:	2300      	movs	r3, #0
 8003932:	4604      	mov	r4, r0
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	602b      	str	r3, [r5, #0]
 800393a:	f7fd fbfa 	bl	8001132 <_fstat>
 800393e:	1c43      	adds	r3, r0, #1
 8003940:	d102      	bne.n	8003948 <_fstat_r+0x1c>
 8003942:	682b      	ldr	r3, [r5, #0]
 8003944:	b103      	cbz	r3, 8003948 <_fstat_r+0x1c>
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	bd38      	pop	{r3, r4, r5, pc}
 800394a:	bf00      	nop
 800394c:	20000538 	.word	0x20000538

08003950 <_isatty_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4d06      	ldr	r5, [pc, #24]	; (800396c <_isatty_r+0x1c>)
 8003954:	2300      	movs	r3, #0
 8003956:	4604      	mov	r4, r0
 8003958:	4608      	mov	r0, r1
 800395a:	602b      	str	r3, [r5, #0]
 800395c:	f7fd fbf9 	bl	8001152 <_isatty>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_isatty_r+0x1a>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	b103      	cbz	r3, 800396a <_isatty_r+0x1a>
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	20000538 	.word	0x20000538

08003970 <_lseek_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4d07      	ldr	r5, [pc, #28]	; (8003990 <_lseek_r+0x20>)
 8003974:	4604      	mov	r4, r0
 8003976:	4608      	mov	r0, r1
 8003978:	4611      	mov	r1, r2
 800397a:	2200      	movs	r2, #0
 800397c:	602a      	str	r2, [r5, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	f7fd fbf2 	bl	8001168 <_lseek>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d102      	bne.n	800398e <_lseek_r+0x1e>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	b103      	cbz	r3, 800398e <_lseek_r+0x1e>
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	bd38      	pop	{r3, r4, r5, pc}
 8003990:	20000538 	.word	0x20000538

08003994 <_read_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4d07      	ldr	r5, [pc, #28]	; (80039b4 <_read_r+0x20>)
 8003998:	4604      	mov	r4, r0
 800399a:	4608      	mov	r0, r1
 800399c:	4611      	mov	r1, r2
 800399e:	2200      	movs	r2, #0
 80039a0:	602a      	str	r2, [r5, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f7fd fb80 	bl	80010a8 <_read>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	d102      	bne.n	80039b2 <_read_r+0x1e>
 80039ac:	682b      	ldr	r3, [r5, #0]
 80039ae:	b103      	cbz	r3, 80039b2 <_read_r+0x1e>
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	bd38      	pop	{r3, r4, r5, pc}
 80039b4:	20000538 	.word	0x20000538

080039b8 <_sbrk_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4d06      	ldr	r5, [pc, #24]	; (80039d4 <_sbrk_r+0x1c>)
 80039bc:	2300      	movs	r3, #0
 80039be:	4604      	mov	r4, r0
 80039c0:	4608      	mov	r0, r1
 80039c2:	602b      	str	r3, [r5, #0]
 80039c4:	f7fd fbde 	bl	8001184 <_sbrk>
 80039c8:	1c43      	adds	r3, r0, #1
 80039ca:	d102      	bne.n	80039d2 <_sbrk_r+0x1a>
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	b103      	cbz	r3, 80039d2 <_sbrk_r+0x1a>
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	bd38      	pop	{r3, r4, r5, pc}
 80039d4:	20000538 	.word	0x20000538

080039d8 <_write_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4d07      	ldr	r5, [pc, #28]	; (80039f8 <_write_r+0x20>)
 80039dc:	4604      	mov	r4, r0
 80039de:	4608      	mov	r0, r1
 80039e0:	4611      	mov	r1, r2
 80039e2:	2200      	movs	r2, #0
 80039e4:	602a      	str	r2, [r5, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7fd fb7b 	bl	80010e2 <_write>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d102      	bne.n	80039f6 <_write_r+0x1e>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	b103      	cbz	r3, 80039f6 <_write_r+0x1e>
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	20000538 	.word	0x20000538

080039fc <_free_r>:
 80039fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039fe:	2900      	cmp	r1, #0
 8003a00:	d044      	beq.n	8003a8c <_free_r+0x90>
 8003a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a06:	9001      	str	r0, [sp, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a0e:	bfb8      	it	lt
 8003a10:	18e4      	addlt	r4, r4, r3
 8003a12:	f7ff fe35 	bl	8003680 <__malloc_lock>
 8003a16:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <_free_r+0x94>)
 8003a18:	9801      	ldr	r0, [sp, #4]
 8003a1a:	6813      	ldr	r3, [r2, #0]
 8003a1c:	b933      	cbnz	r3, 8003a2c <_free_r+0x30>
 8003a1e:	6063      	str	r3, [r4, #4]
 8003a20:	6014      	str	r4, [r2, #0]
 8003a22:	b003      	add	sp, #12
 8003a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a28:	f7ff be30 	b.w	800368c <__malloc_unlock>
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	d908      	bls.n	8003a42 <_free_r+0x46>
 8003a30:	6825      	ldr	r5, [r4, #0]
 8003a32:	1961      	adds	r1, r4, r5
 8003a34:	428b      	cmp	r3, r1
 8003a36:	bf01      	itttt	eq
 8003a38:	6819      	ldreq	r1, [r3, #0]
 8003a3a:	685b      	ldreq	r3, [r3, #4]
 8003a3c:	1949      	addeq	r1, r1, r5
 8003a3e:	6021      	streq	r1, [r4, #0]
 8003a40:	e7ed      	b.n	8003a1e <_free_r+0x22>
 8003a42:	461a      	mov	r2, r3
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	b10b      	cbz	r3, 8003a4c <_free_r+0x50>
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d9fa      	bls.n	8003a42 <_free_r+0x46>
 8003a4c:	6811      	ldr	r1, [r2, #0]
 8003a4e:	1855      	adds	r5, r2, r1
 8003a50:	42a5      	cmp	r5, r4
 8003a52:	d10b      	bne.n	8003a6c <_free_r+0x70>
 8003a54:	6824      	ldr	r4, [r4, #0]
 8003a56:	4421      	add	r1, r4
 8003a58:	1854      	adds	r4, r2, r1
 8003a5a:	42a3      	cmp	r3, r4
 8003a5c:	6011      	str	r1, [r2, #0]
 8003a5e:	d1e0      	bne.n	8003a22 <_free_r+0x26>
 8003a60:	681c      	ldr	r4, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	6053      	str	r3, [r2, #4]
 8003a66:	440c      	add	r4, r1
 8003a68:	6014      	str	r4, [r2, #0]
 8003a6a:	e7da      	b.n	8003a22 <_free_r+0x26>
 8003a6c:	d902      	bls.n	8003a74 <_free_r+0x78>
 8003a6e:	230c      	movs	r3, #12
 8003a70:	6003      	str	r3, [r0, #0]
 8003a72:	e7d6      	b.n	8003a22 <_free_r+0x26>
 8003a74:	6825      	ldr	r5, [r4, #0]
 8003a76:	1961      	adds	r1, r4, r5
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	bf04      	itt	eq
 8003a7c:	6819      	ldreq	r1, [r3, #0]
 8003a7e:	685b      	ldreq	r3, [r3, #4]
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	bf04      	itt	eq
 8003a84:	1949      	addeq	r1, r1, r5
 8003a86:	6021      	streq	r1, [r4, #0]
 8003a88:	6054      	str	r4, [r2, #4]
 8003a8a:	e7ca      	b.n	8003a22 <_free_r+0x26>
 8003a8c:	b003      	add	sp, #12
 8003a8e:	bd30      	pop	{r4, r5, pc}
 8003a90:	20000530 	.word	0x20000530

08003a94 <_init>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	bf00      	nop
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr

08003aa0 <_fini>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	bf00      	nop
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr
